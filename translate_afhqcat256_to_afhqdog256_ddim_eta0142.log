/home/philip/anaconda3/envs/generative_prompt/lib/python3.9/site-packages/torch/distributed/launch.py:181: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use-env is set by default in torchrun.
If your script expects `--local-rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
INFO:torch.distributed.distributed_c10d:Added key: store_based_barrier_key:1 to store for rank: 0
INFO:torch.distributed.distributed_c10d:Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 1 nodes.
wandb: Currently logged in as: dl2-team12 (use `wandb login --relogin` to force relogin)
wandb: wandb version 0.15.2 is available!  To upgrade, please run:
wandb:  $ pip install wandb --upgrade
wandb: Tracking run with wandb version 0.12.15
wandb: Run data is saved locally in /home/philip/Documents/cycle-diffusion/wandb/run-20230511_173801-1kkrhapq
wandb: Run `wandb offline` to turn off syncing.
wandb: Syncing run translate_afhqcat256_to_afhqdog256_ddim_eta0142
wandb: ‚≠êÔ∏è View project at https://wandb.ai/dl2-team12/cycle_diffusion
wandb: üöÄ View run at https://wandb.ai/dl2-team12/cycle_diffusion/runs/1kkrhapq
WARNING:datasets.builder:Using custom data configuration default
WARNING:datasets.builder:Reusing dataset example (./data/example/default/0.0.0/f946598c3aeccde6aa7cb7eed79880c7085bd5a821c994797ac4dc7fd43ff3bd)
  0% 0/3 [00:00<?, ?it/s]100% 3/3 [00:00<00:00, 405.77it/s]
Namespace(config='afhq.yml', model_path='ckpts/ddpm/cat_ema_0.9999_050000.pt')
Namespace(data=Namespace(dataset='AFHQ', category='dog', image_size=256, channels=3, logit_transform=False, uniform_dequantization=False, gaussian_dequantization=False, random_flip=True, rescaled=True, num_workers=0), diffusion=Namespace(beta_schedule='linear', beta_start=0.0001, beta_end=0.02, num_diffusion_timesteps=1000))
Improved diffusion Model loaded.
Namespace(config='afhq.yml', model_path='ckpts/ddpm/afhq_dog_4m.pt')
Namespace(data=Namespace(dataset='AFHQ', category='dog', image_size=256, channels=3, logit_transform=False, uniform_dequantization=False, gaussian_dequantization=False, random_flip=True, rescaled=True, num_workers=0), diffusion=Namespace(beta_schedule='linear', beta_start=0.0001, beta_end=0.02, num_diffusion_timesteps=1000))
Improved diffusion Model loaded.
INFO:root:Rank 0 device = cuda:0
DistributedDataParallel(
  (module): UnsupervisedTranslation(
    (source_gan_wrapper): DDPMDDIMWrapper(
      (generator): UNetModel(
        (time_embed): Sequential(
          (0): Linear(in_features=128, out_features=512, bias=True)
          (1): SiLU()
          (2): Linear(in_features=512, out_features=512, bias=True)
        )
        (input_blocks): ModuleList(
          (0): TimestepEmbedSequential(
            (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (1): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=256, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (2): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (x_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=256, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (3): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=256, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (4): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (x_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=256, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (5): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (6): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (x_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (7): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (8): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (x_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (9): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): AttentionBlock(
              (norm): GroupNorm32(32, 512, eps=1e-05, affine=True)
              (qkv): Conv1d(512, 1536, kernel_size=(1,), stride=(1,))
              (attention): QKVAttentionLegacy()
              (proj_out): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
            )
          )
          (10): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (x_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (11): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
        )
        (middle_block): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=512, out_features=1024, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0.0, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Identity()
          )
          (1): AttentionBlock(
            (norm): GroupNorm32(32, 512, eps=1e-05, affine=True)
            (qkv): Conv1d(512, 1536, kernel_size=(1,), stride=(1,))
            (attention): QKVAttentionLegacy()
            (proj_out): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
          )
          (2): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=512, out_features=1024, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0.0, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Identity()
          )
        )
        (output_blocks): ModuleList(
          (0): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (1): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Upsample()
              (x_upd): Upsample()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (2): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): AttentionBlock(
              (norm): GroupNorm32(32, 512, eps=1e-05, affine=True)
              (qkv): Conv1d(512, 1536, kernel_size=(1,), stride=(1,))
              (attention): QKVAttentionLegacy()
              (proj_out): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
            )
          )
          (3): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 768, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(768, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): AttentionBlock(
              (norm): GroupNorm32(32, 512, eps=1e-05, affine=True)
              (qkv): Conv1d(512, 1536, kernel_size=(1,), stride=(1,))
              (attention): QKVAttentionLegacy()
              (proj_out): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
            )
            (2): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Upsample()
              (x_upd): Upsample()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (4): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 768, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(768, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (5): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Upsample()
              (x_upd): Upsample()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (6): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (7): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 384, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Upsample()
              (x_upd): Upsample()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (8): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 384, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=256, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (9): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=256, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Upsample()
              (x_upd): Upsample()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=256, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (10-11): 2 x TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=256, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (out): Sequential(
          (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(128, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
    )
    (target_gan_wrapper): DDPMDDIMWrapper(
      (generator): UNetModel(
        (time_embed): Sequential(
          (0): Linear(in_features=128, out_features=512, bias=True)
          (1): SiLU()
          (2): Linear(in_features=512, out_features=512, bias=True)
        )
        (input_blocks): ModuleList(
          (0): TimestepEmbedSequential(
            (0): Conv2d(3, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          )
          (1): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=256, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (2): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (x_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=256, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (3): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=256, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (4): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (x_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=256, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (5): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (6): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (x_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (7): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (8): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (x_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (9): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(256, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(256, 512, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): AttentionBlock(
              (norm): GroupNorm32(32, 512, eps=1e-05, affine=True)
              (qkv): Conv1d(512, 1536, kernel_size=(1,), stride=(1,))
              (attention): QKVAttentionLegacy()
              (proj_out): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
            )
          )
          (10): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (x_upd): Downsample(
                (op): AvgPool2d(kernel_size=2, stride=2, padding=0)
              )
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (11): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
        )
        (middle_block): TimestepEmbedSequential(
          (0): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=512, out_features=1024, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0.0, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Identity()
          )
          (1): AttentionBlock(
            (norm): GroupNorm32(32, 512, eps=1e-05, affine=True)
            (qkv): Conv1d(512, 1536, kernel_size=(1,), stride=(1,))
            (attention): QKVAttentionLegacy()
            (proj_out): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
          )
          (2): ResBlock(
            (in_layers): Sequential(
              (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (h_upd): Identity()
            (x_upd): Identity()
            (emb_layers): Sequential(
              (0): SiLU()
              (1): Linear(in_features=512, out_features=1024, bias=True)
            )
            (out_layers): Sequential(
              (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
              (1): SiLU()
              (2): Dropout(p=0.0, inplace=False)
              (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
            )
            (skip_connection): Identity()
          )
        )
        (output_blocks): ModuleList(
          (0): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (1): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Upsample()
              (x_upd): Upsample()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (2): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 1024, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(1024, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): AttentionBlock(
              (norm): GroupNorm32(32, 512, eps=1e-05, affine=True)
              (qkv): Conv1d(512, 1536, kernel_size=(1,), stride=(1,))
              (attention): QKVAttentionLegacy()
              (proj_out): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
            )
          )
          (3): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 768, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(768, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(768, 512, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): AttentionBlock(
              (norm): GroupNorm32(32, 512, eps=1e-05, affine=True)
              (qkv): Conv1d(512, 1536, kernel_size=(1,), stride=(1,))
              (attention): QKVAttentionLegacy()
              (proj_out): Conv1d(512, 512, kernel_size=(1,), stride=(1,))
            )
            (2): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Upsample()
              (x_upd): Upsample()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=1024, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (4): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 768, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(768, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(768, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (5): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Upsample()
              (x_upd): Upsample()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (6): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 512, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(512, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (7): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 384, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(384, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(384, 256, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Upsample()
              (x_upd): Upsample()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=512, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (8): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 384, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(384, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=256, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(384, 128, kernel_size=(1, 1), stride=(1, 1))
            )
          )
          (9): TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=256, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            )
            (1): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Upsample()
              (x_upd): Upsample()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=256, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Identity()
            )
          )
          (10-11): 2 x TimestepEmbedSequential(
            (0): ResBlock(
              (in_layers): Sequential(
                (0): GroupNorm32(32, 256, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (h_upd): Identity()
              (x_upd): Identity()
              (emb_layers): Sequential(
                (0): SiLU()
                (1): Linear(in_features=512, out_features=256, bias=True)
              )
              (out_layers): Sequential(
                (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
                (1): SiLU()
                (2): Dropout(p=0.0, inplace=False)
                (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
              )
              (skip_connection): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1))
            )
          )
        )
        (out): Sequential(
          (0): GroupNorm32(32, 128, eps=1e-05, affine=True)
          (1): SiLU()
          (2): Conv2d(128, 6, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
        )
      )
    )
  )
)
INFO:__main__:*** Evaluate ***
Rank 0 Trainer build successfully.
INFO:trainer.trainer:***** Running eval *****
INFO:trainer.trainer:  Num examples = 493
INFO:trainer.trainer:  Batch size = 1
0it [00:00, ?it/s]/home/philip/Documents/cycle-diffusion/model/lib/ddpm_ddim/utils/diffusion_utils.py:17: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  out = torch.gather(torch.tensor(a, dtype=torch.float, device=t.device), 0, t.long())
at tensor([[[[0.0007]]]], device='cuda:0')
0 196433.15625
1 196174.109375
2 196194.625
3 196558.984375
4 195020.6875
5 195811.15625
6 197318.234375
7 197380.484375
8 197509.25
9 196197.875
10 197109.203125
11 196859.8125
12 196808.671875
13 196483.8125
14 196591.6875
15 195098.5625
16 197235.3125
17 195709.625
18 195924.59375
19 195506.84375
20 197274.578125
21 196875.859375
22 196706.796875
23 197301.3125
24 196764.984375
25 195901.640625
26 196644.640625
27 196211.875
28 197787.71875
29 197045.390625
30 197499.40625
31 196719.609375
32 196455.84375
33 196485.890625
34 195807.8125
35 195870.53125
36 196481.75
37 196044.140625
38 197019.125
39 196106.625
40 197748.140625
41 197201.25
42 196393.46875
43 196532.25
44 196298.125
45 197668.703125
46 195981.703125
47 197048.75
48 195236.0
49 195031.25
50 196408.34375
51 196692.34375
52 196285.53125
53 196940.421875
54 197366.875
55 196302.25
56 196015.65625
57 198345.3125
58 196993.53125
59 196415.03125
60 195839.890625
61 196555.8125
62 196399.421875
63 196401.375
64 196337.40625
65 197503.65625
66 196870.375
67 196797.578125
68 196547.203125
69 196619.265625
70 196043.6875
71 195748.25
72 196445.4375
73 197715.5
74 195968.578125
75 196534.1875
76 195481.6875
77 197389.171875
78 196979.5
79 195779.71875
80 195477.6875
81 196388.609375
82 197773.359375
83 197278.28125
84 197279.84375
85 197372.390625
86 197028.5
87 195930.90625
88 196126.671875
89 196533.71875
90 196476.1875
91 196610.984375
92 196786.96875
93 196397.46875
94 197101.65625
95 196046.4375
96 197386.125
97 195663.765625
98 196971.40625
99 196628.28125
100 196321.1875
101 196427.203125
102 197521.0
103 196852.734375
104 196933.5
105 195960.96875
106 195693.578125
107 195727.0625
108 197767.15625
109 195848.953125
110 195987.65625
111 195885.625
112 197236.140625
113 196106.46875
114 195913.890625
115 197680.390625
116 196069.5625
117 197663.421875
118 196901.875
119 196795.5
120 197218.375
121 195032.84375
122 196121.65625
123 197578.265625
124 197098.375
125 198319.546875
126 196666.21875
127 196033.515625
128 196072.59375
129 196915.609375
130 197242.765625
131 196552.640625
132 196326.1875
133 196860.875
134 196810.8125
135 196116.0625
136 195887.109375
137 196460.8125
138 196768.96875
139 197310.515625
140 196501.953125
141 196040.28125
142 196961.25
143 197333.0625
144 196433.90625
145 195962.390625
146 196838.6875
147 197983.375
148 197914.4375
149 196279.734375
150 195786.859375
151 196706.140625
152 196890.53125
153 197022.96875
154 196098.65625
155 196145.171875
156 196052.25
157 196348.03125
158 196760.71875
159 196932.734375
160 196627.59375
161 196488.828125
162 197091.9375
163 196519.375
164 196373.640625
165 196909.03125
166 197722.1875
167 196733.6875
168 195962.484375
169 195634.96875
170 197522.0625
171 196505.0
172 196770.875
173 196228.96875
174 196175.9375
175 197002.875
176 195959.640625
177 195872.65625
178 195253.3125
179 195336.15625
180 195721.0
181 195733.328125
182 197049.96875
183 196659.9375
184 196122.8125
185 196821.59375
186 196549.0
187 196246.078125
188 196493.5
189 196285.078125
190 196931.859375
191 196038.84375
192 197446.0
193 197135.5625
194 197417.046875
195 197786.265625
196 196592.40625
197 196050.265625
198 198378.984375
199 195504.40625
200 197313.71875
201 196564.921875
202 197117.625
203 195730.59375
204 196308.0625
205 196825.890625
206 196890.71875
207 196176.5
208 196439.78125
209 197806.0
210 197252.765625
211 196314.484375
212 196929.203125
213 196737.6875
214 195868.0
215 196325.359375
216 196436.875
217 196516.75
218 197763.9375
219 196853.0
220 197106.9375
221 196266.84375
222 196348.40625
223 196310.1875
224 197574.875
225 196447.875
226 196995.0625
227 195813.078125
228 196543.0625
229 196695.359375
230 197049.359375
231 196310.71875
232 196418.640625
233 197176.25
234 197462.484375
235 197574.96875
236 196569.078125
237 195115.53125
238 196878.59375
239 197357.65625
240 197556.609375
241 196038.75
242 196822.03125
243 196914.8125
244 196670.578125
245 197971.90625
246 196463.90625
247 197318.859375
248 196657.625
249 196783.453125
250 196326.71875
251 196932.40625
252 197065.0625
253 196816.203125
254 197532.53125
255 196084.59375
256 196185.5625
257 195817.625
258 196377.25
259 197747.078125
260 196260.96875
261 197056.375
262 195530.109375
263 196549.15625
264 195196.5
265 196404.109375
266 195952.265625
267 197967.75
268 196284.484375
269 197047.671875
270 196655.90625
271 197669.921875
272 197192.796875
273 196953.796875
274 197634.84375
275 197240.625
276 195918.46875
277 196483.421875
278 197577.859375
279 196854.171875
280 196492.453125
281 195573.890625
282 197329.3125
283 195854.28125
284 194215.109375
285 197532.1875
286 197124.703125
287 196799.65625
288 196830.328125
289 196925.875
290 195995.90625
291 197717.546875
292 196503.125
293 196101.140625
294 196645.5
295 196711.296875
296 196782.78125
297 196834.015625
298 197238.6875
299 196064.4375
300 197099.96875
301 196805.78125
302 196280.4375
303 197193.40625
304 195999.96875
305 196758.46875
306 195666.9375
307 196208.0
308 196529.046875
309 198516.9375
310 196401.8125
311 196726.78125
312 197553.875
313 196625.03125
314 196779.71875
315 196682.84375
316 196276.875
317 195311.6875
318 196428.328125
319 196505.078125
320 196331.984375
321 197586.625
322 197194.15625
323 197939.46875
324 196308.28125
325 197546.8125
326 196442.25
327 196125.90625
328 196308.265625
329 196135.734375
330 197435.234375
331 197235.375
332 196664.0
333 196230.3125
334 195594.109375
335 197027.328125
336 196455.484375
337 197209.8125
338 196743.0
339 196505.71875
340 196602.3125
341 196900.796875
342 196585.8125
343 196670.53125
344 196600.9375
345 196966.375
346 196676.1875
347 197064.375
348 197820.859375
349 197523.59375
350 195601.96875
351 196412.25
352 196302.84375
353 197038.03125
354 196105.34375
355 196544.3125
356 196984.171875
357 196991.46875
358 197350.453125
359 196308.40625
360 196863.078125
361 196546.09375
362 195809.5
363 198100.609375
364 197192.09375
365 197124.1875
366 195721.96875
367 196593.875
368 197388.671875
369 195834.734375
370 197124.640625
371 196921.15625
372 196155.734375
373 197227.828125
374 197515.03125
375 196526.6875
376 196040.390625
377 196105.390625
378 196210.125
379 197201.75
380 197035.40625
381 196744.078125
382 195980.953125
383 196738.9375
384 196459.953125
385 195767.921875
386 196908.859375
387 195715.15625
388 196077.0625
389 196242.984375
390 198044.625
391 197122.25
392 195803.75
393 197157.71875
394 196327.65625
395 196275.1875
396 196016.1875
397 196845.53125
398 196581.1875
399 197198.375
400 195467.171875
401 197065.6875
402 195916.5625
403 196257.5625
404 196237.9375
405 196519.125
406 196725.703125
407 196065.40625
408 196732.75
409 197862.375
410 197237.0
411 196797.3125
412 196488.21875
413 196046.46875
414 197611.953125
415 196994.1875
416 196522.859375
417 196114.375
418 195590.421875
419 196129.53125
420 197491.1875
421 196929.078125
422 196715.046875
423 195494.859375
424 196094.9375
425 196683.15625
426 197240.1875
427 196451.390625
428 196482.4375
429 197418.953125
430 196375.4375
431 196869.40625
432 196543.6875
433 196394.390625
434 196970.390625
435 195397.25
436 197967.953125
437 196425.984375
438 196530.921875
439 197379.9375
440 197306.40625
441 197000.375
442 197112.6875
443 197032.40625
444 196259.265625
445 197137.28125
446 197342.703125
447 196152.140625
448 198003.671875
449 197421.8125
450 196892.609375
451 196198.84375
452 195996.65625
453 197421.6875
454 196257.09375
455 197253.171875
456 198314.78125
457 196250.265625
458 196039.9375
459 196553.9375
460 197599.65625
461 197062.875
462 198220.5
463 197147.953125
464 197218.125
465 196286.5625
466 197472.6875
467 195635.703125
468 196409.4375
469 197082.21875
470 197903.390625
471 198230.75
472 196008.109375
473 196097.90625
474 197957.765625
475 196963.0625
476 196670.46875
477 196247.78125
478 196586.9375
479 195877.71875
480 197804.40625
481 196402.25
482 196473.078125
483 196113.4375
484 196363.84375
485 196189.8125
486 198622.765625
487 195978.765625
488 196649.796875
489 196464.203125
490 196711.0
491 197299.640625
492 196014.359375
493 196311.46875
494 196762.4375
495 196032.78125
496 198013.6875
497 197565.734375
498 195742.5
499 197765.21875
500 196843.953125
501 195780.0
502 196232.984375
503 197162.328125
504 197273.40625
505 197470.9375
506 195562.5
507 196790.28125
508 196358.484375
509 196087.90625
510 195819.796875
511 197068.6875
512 197131.0625
513 196393.21875
514 196655.53125
515 197591.453125
516 196974.34375
517 196839.78125
518 195868.734375
519 196432.109375
520 197194.640625
521 196903.8125
522 197060.15625
523 196767.1875
524 196923.59375
525 197294.921875
526 195875.0
527 196828.25
528 197138.078125
529 197761.5
530 195489.71875
531 196307.984375
532 196353.65625
533 196873.890625
534 197609.09375
535 196476.859375
536 196872.421875
537 197516.921875
538 197314.265625
539 197244.375
540 196850.625
541 196554.09375
542 196404.953125
543 195945.921875
544 197221.125
545 197487.015625
546 196796.96875
547 195963.609375
548 196537.0625
549 196129.5625
550 197887.671875
551 196447.4375
552 196393.125
553 197492.921875
554 196900.6875
555 195897.5625
556 197041.796875
557 196812.25
558 196341.171875
559 196702.25
560 196691.59375
561 195932.0
562 197259.234375
563 196335.84375
564 196874.96875
565 197766.84375
566 196965.0625
567 196807.84375
568 196876.859375
569 196482.046875
570 198107.6875
571 196027.390625
572 196944.375
573 198004.421875
574 196509.9375
575 196932.296875
576 196920.8125
577 196283.6875
578 196956.171875
579 197785.515625
580 197745.0625
581 198496.09375
582 197237.15625
583 196487.15625
584 196931.875
585 195926.8125
586 197331.6875
587 197226.46875
588 197662.890625
589 196874.09375
590 196644.28125
591 198244.421875
592 197465.0
593 197724.71875
594 197601.0
595 197603.234375
596 196623.703125
597 197356.671875
598 197749.8125
599 197030.25
600 197557.359375
601 196560.375
602 196434.21875
603 196787.5625
604 198134.71875
605 196170.625
606 197983.359375
607 196963.578125
608 197054.671875
609 197992.5
610 197909.4375
611 196223.28125
612 197242.3125
613 196941.46875
614 196844.796875
615 196830.3125
616 196666.78125
617 197992.0
618 197050.109375
619 196781.453125
620 197112.15625
621 197228.984375
622 197283.84375
623 196907.53125
624 198011.0625
625 196640.453125
626 195979.703125
627 196576.828125
628 196655.40625
629 197252.6875
630 196896.71875
631 196452.15625
632 197067.1875
633 197677.40625
634 197678.125
635 197799.3125
636 197786.125
637 196805.46875
638 197372.484375
639 197300.75
640 196443.140625
641 196070.3125
642 197129.03125
643 198014.15625
644 196093.5625
645 197294.546875
646 197045.515625
647 196381.625
648 196704.03125
649 197584.875
650 197296.21875
651 197026.796875
652 197547.34375
653 197781.859375
654 197106.34375
655 198918.75
656 197831.578125
657 197653.421875
658 196825.4375
659 197128.90625
660 197313.90625
661 196973.03125
662 198347.71875
663 197374.859375
664 196738.15625
665 197112.3125
666 196731.59375
667 196139.921875
668 197388.625
669 198719.53125
670 196778.6875
671 197305.25
672 196394.40625
673 198549.3125
674 196400.5
675 197175.296875
676 199312.875
677 197446.9375
678 197308.0625
679 198555.59375
680 198600.421875
681 198123.859375
682 196373.140625
683 197261.109375
684 198392.6875
685 197702.21875
686 197410.3125
687 197446.84375
688 197612.015625
689 197119.484375
690 196676.84375
691 197804.1875
692 198040.6875
693 197484.53125
694 197928.03125
695 198319.875
696 197915.625
697 197014.109375
698 198843.828125
699 196719.765625
700 198554.65625
701 198941.078125
702 197346.09375
703 199141.28125
704 197281.84375
705 197867.859375
706 198090.90625
707 197198.875
708 197742.328125
709 197656.40625
710 198018.34375
711 198439.109375
712 197465.09375
713 197329.234375
714 198086.953125
715 197837.875
716 197751.125
717 198357.84375
718 198963.828125
719 198078.765625
720 197241.84375
721 197806.046875
722 197539.28125
723 197700.734375
724 198998.0625
725 198357.875
726 198764.125
727 198002.1875
728 198812.015625
729 197493.375
730 198748.5
731 197967.984375
732 198294.234375
733 199325.078125
734 199047.953125
735 197788.296875
736 198660.65625
737 199234.859375
738 197355.921875
739 198431.875
740 198414.703125
741 198214.359375
742 198798.25
743 198618.875
744 198675.59375
745 199314.0
746 199165.21875
747 199091.140625
748 198811.34375
749 199521.625
750 198190.1875
751 199457.390625
752 199704.625
753 199246.953125
754 198994.140625
755 199012.09375
756 199366.46875
757 199147.71875
758 199656.640625
759 199471.625
760 201009.078125
761 199728.03125
762 198561.25
763 199329.734375
764 201028.09375
765 199875.875
766 199059.0625
767 200087.03125
768 200449.53125
769 200080.859375
770 199694.1875
771 201525.96875
772 200989.390625
773 199829.84375
774 200789.484375
775 200572.359375
776 200784.234375
777 201374.65625
778 202247.65625
779 202007.03125
780 200717.09375
781 201792.34375
782 202096.171875
783 200678.75
784 201350.75
785 202435.328125
786 201981.953125
787 201445.34375
788 202686.28125
789 202465.96875
790 203157.03125
791 201986.21875
792 202574.875
793 202626.75
794 203347.046875
795 203483.59375
796 203970.53125
797 203369.453125
798 203436.46875
799 204525.171875
800 204227.53125
801 205496.71875
802 205534.3125
803 207199.703125
804 205937.796875
805 206778.53125
806 207650.34375
807 206107.625
808 208146.46875
809 209285.03125
810 208104.90625
811 208519.21875
812 210203.21875
813 211154.46875
814 210923.921875
815 210866.0625
816 211952.84375
817 213247.84375
818 214287.546875
819 213549.09375
820 215803.5
821 217053.109375
822 218250.375
823 219430.546875
824 221910.21875
825 223691.015625
826 225725.71875
827 229232.90625
828 230162.40625
829 232688.375
830 236761.078125
831 239722.609375
832 243779.453125
833 247565.71875
834 255115.875
835 259224.65625
836 268774.0
837 277948.9375
838 288916.625
839 302206.78125
840 321624.125
841 343882.25
842 376229.90625
843 420103.65625
844 487390.0
845 594453.3125
846 790142.6875
847 1235017.75
848 2862482.75
at tensor([[[[0.8970]]]], device='cuda:0')
1it [02:31, 151.30s/it]at tensor([[[[0.0007]]]], device='cuda:0')
0 196695.75
1 195334.65625
2 196628.359375
3 196704.828125
4 196699.25
5 195655.484375
6 195401.90625
7 196752.546875
8 196630.3125
9 196702.0
10 196994.5625
11 196298.125
12 196743.203125
13 196921.953125
14 196145.921875
15 196990.265625
16 196796.15625
17 197368.078125
18 196885.5625
19 196366.53125
20 196854.046875
21 197097.796875
22 197028.625
23 196824.671875
24 195743.390625
25 196528.5
26 197167.109375
27 196695.1875
28 196236.40625
29 196154.4375
30 196454.515625
31 195610.890625
32 196083.453125
33 195177.5
34 197168.375
35 196898.53125
36 195975.84375
37 197565.1875
38 196457.28125
39 197263.96875
40 196444.734375
41 196733.5
42 196808.8125
43 197020.53125
44 196401.484375
45 196535.390625
46 197473.234375
47 197936.953125
48 195667.609375
49 196323.9375
50 196827.5
51 196459.03125
52 197799.15625
53 197347.0
54 197242.71875
55 196022.09375
56 197273.671875
57 195058.15625
58 195306.875
59 197150.484375
60 196402.0625
61 197871.5625
62 196960.421875
63 195753.6875
64 196705.140625
65 196312.96875
66 197472.625
67 197666.78125
68 197140.6875
69 196320.59375
70 197112.890625
71 196848.3125
72 196632.953125
73 197854.15625
74 197017.15625
75 196884.46875
76 196170.28125
77 196864.1875
78 198378.46875
79 197230.1875
80 196652.421875
81 197399.03125
82 195945.09375
83 195895.0
84 196887.703125
85 196886.546875
86 196702.390625
87 195036.71875
88 195980.03125
89 196262.28125
90 196865.078125
91 196916.34375
92 195925.75
93 196790.3125
94 195696.234375
95 197340.09375
96 197429.515625
97 196906.6875
98 196632.1875
99 195964.546875
100 196609.6875
101 195601.0
102 196953.109375
103 196421.46875
104 195930.015625
105 196332.375
106 196711.21875
107 195426.46875
108 196228.875
109 195707.625
110 195984.8125
111 196903.578125
112 196847.890625
113 196639.3125
114 197210.96875
115 195693.546875
116 196393.46875
117 196085.734375
118 197403.65625
119 196609.78125
120 196581.8125
121 195775.140625
122 195544.53125
123 195833.859375
124 196910.375
125 195718.0
126 196090.515625
127 196559.03125
128 197051.15625
129 196351.6875
130 197263.875
131 197435.71875
132 196607.5
133 196093.625
134 196586.328125
135 195981.21875
136 197095.671875
137 196849.921875
138 198180.46875
139 195306.09375
140 196905.59375
141 196565.78125
142 197884.59375
143 196129.8125
144 196253.125
145 196848.578125
146 196295.09375
147 197026.203125
148 196354.28125
149 196791.109375
150 196812.0625
151 196877.71875
152 196074.1875
153 197418.21875
154 196535.0625
155 197018.546875
156 196342.15625
157 196196.890625
158 197017.296875
159 195179.375
160 197046.359375
161 196606.84375
162 196991.1875
163 195653.515625
164 195950.421875
165 196477.6875
166 196223.171875
167 196969.921875
168 198201.40625
169 196630.828125
170 196941.171875
171 196747.6875
172 197119.140625
173 196096.921875
174 196659.375
175 196318.515625
176 197180.40625
177 196924.5625
178 196465.453125
179 195957.15625
180 197163.90625
181 195929.796875
182 196511.84375
183 196229.75
184 196378.25
185 196980.53125
186 196382.96875
187 196211.5
188 196595.390625
189 196492.546875
190 196481.875
191 196538.953125
192 196460.59375
193 197448.71875
194 196936.4375
195 195783.75
196 197410.78125
197 196292.953125
198 195422.421875
199 196060.734375
200 196823.96875
201 196304.921875
202 196963.515625
203 196649.28125
204 196201.421875
205 196593.921875
206 195542.46875
207 196933.921875
208 196549.9375
209 197485.46875
210 196568.3125
211 198939.09375
212 196165.046875
213 196118.625
214 196399.421875
215 196689.578125
216 197109.65625
217 196008.890625
218 195492.625
219 196337.71875
220 197597.1875
221 196553.84375
222 196718.015625
223 197036.25
224 196152.0
225 197272.96875
226 197238.203125
227 196710.375
228 197156.28125
229 196948.453125
230 197106.53125
231 196199.46875
232 196471.296875
233 196486.640625
234 197126.28125
235 196985.359375
236 197291.875
237 196413.34375
238 196367.046875
239 197224.8125
240 196448.21875
241 196513.15625
242 196093.5625
243 196623.90625
244 196802.5
245 197023.1875
246 197349.46875
247 196953.0
248 197736.40625
249 197425.75
250 197704.453125
251 195710.875
252 196891.859375
253 196417.921875
254 197488.28125
255 196616.34375
256 196180.125
257 197247.078125
258 195959.78125
259 195950.046875
260 196355.859375
261 196753.359375
262 196217.34375
263 197165.03125
264 195897.34375
265 196480.0
266 197560.46875
267 197109.203125
268 196512.28125
269 196036.390625
270 196861.75
271 195875.5
272 195868.625
273 195736.0625
274 197149.671875
275 197833.25
276 196074.3125
277 198108.0
278 196539.140625
279 196746.09375
280 197587.515625
281 197724.265625
282 197990.90625
283 195742.96875
284 196579.8125
285 196941.96875
286 197423.71875
287 196998.34375
288 195955.53125
289 196932.25
290 198049.78125
291 196659.5
292 196356.0625
293 196325.125
294 196656.3125
295 196602.9375
296 196984.78125
297 195840.234375
298 196253.828125
299 196819.40625
300 196984.78125
301 196916.015625
302 196009.625
303 196787.953125
304 196773.65625
305 197575.8125
306 195593.625
307 196739.0625
308 198105.890625
309 195185.234375
310 197137.765625
311 196435.1875
312 196262.75
313 197744.546875
314 196108.0625
315 196745.40625
316 197217.34375
317 197145.0625
318 196657.71875
319 195870.625
320 196063.5
321 197189.625
322 196673.6875
323 196971.734375
324 196271.53125
325 196876.671875
326 195215.59375
327 196130.90625
328 195894.296875
329 196632.8125
330 195620.0
331 196555.71875
332 196551.125
333 196008.015625
334 196200.859375
335 196516.734375
336 196732.40625
337 197081.59375
338 197594.25
339 195974.0625
340 196543.125
341 196330.515625
342 197393.953125
343 195620.03125
344 197413.609375
345 197297.59375
346 197429.40625
347 196248.265625
348 196403.875
349 195917.90625
350 196624.6875
351 196020.484375
352 194999.265625
353 196253.40625
354 197600.171875
355 197639.140625
356 197314.3125
357 196352.390625
358 195480.859375
359 196783.40625
360 196494.25
361 196668.90625
362 197477.0
363 196490.84375
364 196746.625
365 196928.859375
366 197474.9375
367 195644.875
368 196593.875
369 196865.5
370 196893.1875
371 197567.65625
372 197573.765625
373 196215.140625
374 197723.15625
375 197582.515625
376 195671.78125
377 196786.46875
378 196617.65625
379 196903.40625
380 196355.1875
381 196711.0625
382 197759.96875
383 195559.46875
384 197003.21875
385 197079.3125
386 196885.34375
387 197411.265625
388 196052.84375
389 197169.015625
390 196589.421875
391 197253.859375
392 197214.65625
393 197677.765625
394 197918.53125
395 197753.5
396 197152.59375
397 196979.71875
398 196378.984375
399 197524.1875
400 196455.15625
401 196597.296875
402 196999.875
403 196516.5
404 196074.65625
405 197050.25
406 196918.234375
407 196911.734375
408 197705.21875
409 196980.125
410 196207.359375
411 197785.578125
412 197859.640625
413 196081.21875
414 197760.859375
415 195946.53125
416 196187.4375
417 196926.53125
418 196059.640625
419 197517.90625
420 197980.40625
421 196869.03125
422 196291.03125
423 197168.875
424 196716.5
425 197625.40625
426 197101.65625
427 197032.171875
428 197606.0625
429 196730.859375
430 196419.28125
431 196115.03125
432 196338.453125
433 196527.625
434 197321.28125
435 196745.6875
436 197087.96875
437 197408.71875
438 197011.546875
439 196505.375
440 196619.4375
441 195863.34375
442 197279.59375
443 197755.359375
444 196532.34375
445 196114.09375
446 196589.640625
447 196398.9375
448 196710.46875
449 196373.28125
450 197172.3125
451 196156.40625
452 196774.421875
453 196496.125
454 196589.4375
455 196634.53125
456 196260.75
457 196135.84375
458 195726.0625
459 197590.046875
460 197517.84375
461 196368.875
462 197037.21875
463 196008.75
464 196393.546875
465 197321.59375
466 196529.0625
467 196464.59375
468 197269.75
469 196536.578125
470 196300.0625
471 196087.296875
472 197654.59375
473 197108.78125
474 197096.359375
475 196151.0
476 196138.25
477 197202.296875
478 196850.265625
479 197371.921875
480 197698.90625
481 196283.0
482 197412.59375
483 196140.53125
484 197297.21875
485 197285.640625
486 197527.640625
487 195678.671875
488 197091.609375
489 196253.8125
490 196814.703125
491 197272.34375
492 197243.6875
493 196663.5
494 197450.953125
495 195371.0625
496 195847.5
497 196941.421875
498 197219.609375
499 197656.53125
500 197410.828125
501 197106.5625
502 197528.078125
503 197123.640625
504 197145.0625
505 196960.375
506 196757.78125
507 196517.71875
508 196462.5
509 196959.703125
510 196238.875
511 197286.53125
512 197194.28125
513 196217.03125
514 197541.03125
515 197724.375
516 197929.921875
517 197550.390625
518 197935.859375
519 197147.8125
520 197842.828125
521 196797.4375
522 196232.125
523 198466.21875
524 196810.84375
525 197219.5
526 196592.03125
527 198022.59375
528 198152.796875
529 197708.40625
530 197492.75
531 196301.4375
532 196448.765625
533 197091.203125
534 197294.65625
535 196354.9375
536 197562.5
537 196339.140625
538 196775.6875
539 197213.40625
540 196652.21875
541 195875.21875
542 197392.453125
543 195656.40625
544 196622.75
545 197596.125
546 197030.015625
547 197224.875
548 197827.734375
549 196124.265625
550 196567.375
551 197751.234375
552 196153.546875
553 196829.03125
554 197556.890625
555 198917.375
556 196802.21875
557 197364.78125
558 196317.625
559 197112.828125
560 196558.5
561 198380.84375
562 196629.1875
563 196524.4375
564 197032.671875
565 196059.984375
566 197864.8125
567 197588.90625
568 196522.953125
569 196470.59375
570 197278.15625
571 198100.046875
572 197149.78125
573 196988.65625
574 197338.6875
575 197398.890625
576 197394.09375
577 198150.640625
578 198247.75
579 198590.15625
580 197157.3125
581 197213.109375
582 197332.78125
583 197434.03125
584 197378.328125
585 196322.296875
586 198047.609375
587 197134.5625
588 198490.59375
589 196868.921875
590 197140.40625
591 197338.78125
592 196653.40625
593 196902.84375
594 197127.65625
595 197105.84375
596 197569.78125
597 196532.3125
598 197349.671875
599 197708.375
600 196734.3125
601 197613.109375
602 196747.8125
603 198210.5
604 197071.40625
605 197471.71875
606 197669.5
607 197197.9375
608 196376.125
609 197398.0
610 197798.359375
611 198129.953125
612 196942.328125
613 197498.25
614 196915.90625
615 197220.78125
616 197432.375
617 197235.59375
618 197213.40625
619 197350.75
620 196821.8125
621 197792.8125
622 197827.9375
623 196934.21875
624 197845.234375
625 198415.75
626 198082.359375
627 196989.046875
628 196766.234375
629 197855.03125
630 195509.3125
631 197095.25
632 197129.3125
633 197307.84375
634 197459.671875
635 197882.90625
636 198154.828125
637 195502.9375
638 199065.4375
639 198132.546875
640 196713.15625
641 198169.90625
642 197738.34375
643 197866.75
644 196640.6875
645 197248.03125
646 196957.109375
647 197986.4375
648 198195.28125
649 198241.0
650 197239.15625
651 198231.890625
652 197495.71875
653 198924.609375
654 198169.4375
655 197191.921875
656 198800.375
657 197465.390625
658 198360.75
659 198307.703125
660 198966.9375
661 198592.6875
662 197648.703125
663 197367.109375
664 198050.28125
665 198413.15625
666 198127.5
667 197506.53125
668 198163.109375
669 198175.09375
670 197571.28125
671 197943.96875
672 198286.671875
673 197953.78125
674 197319.765625
675 198721.546875
676 198372.4375
677 197399.78125
678 198982.921875
679 198097.84375
680 197825.125
681 198417.53125
682 197986.65625
683 198405.765625
684 196612.9375
685 198251.6875
686 197589.609375
687 197751.265625
688 199358.09375
689 198263.71875
690 196655.546875
691 197478.75
692 198348.0
693 199139.328125
694 198142.3125
695 198788.53125
696 197563.84375
697 197912.9375
698 198968.40625
699 198190.65625
700 199258.90625
701 198254.734375
702 198665.984375
703 199292.3125
704 199027.59375
705 198181.0625
706 198008.65625
707 198545.4375
708 197863.375
709 198144.265625
710 199777.46875
711 199937.90625
712 198788.15625
713 197976.078125
714 199657.21875
715 199341.21875
716 199628.546875
717 199674.0
718 198471.1875
719 197569.53125
720 198460.15625
721 200018.75
722 198401.609375
723 198668.40625
724 199216.21875
725 199392.375
726 198835.03125
727 200000.625
728 199220.546875
729 199173.34375
730 199051.734375
731 198997.125
732 201048.703125
733 198882.75
734 199254.5625
735 198323.0
736 199185.375
737 198937.96875
738 200476.75
739 200660.5625
740 198804.296875
741 199555.546875
742 199623.4375
743 199391.796875
744 199658.125
745 199553.796875
746 199486.5625
747 200185.0625
748 199223.6875
749 200685.34375
750 200210.6875
751 200191.4375
752 199846.4375
753 199892.515625
754 200153.21875
755 200861.625
756 200835.828125
757 200182.3125
758 199760.375
759 200161.1875
760 199875.0
761 200461.296875
762 200783.40625
763 199517.046875
764 200636.6875
765 201136.8125
766 202100.984375
767 201644.078125
768 202392.140625
769 200746.46875
770 201466.3125
771 202262.234375
772 201950.4375
773 201802.46875
774 201494.03125
775 201945.1875
776 202430.34375
777 202843.21875
778 202586.078125
779 203880.3125
780 202832.71875
781 202818.234375
782 203578.46875
783 203659.1875
784 203104.109375
785 203617.078125
786 204518.40625
787 204286.0625
788 205323.3125
789 205588.984375
790 205826.71875
791 205969.09375
792 207286.140625
793 205629.03125
794 205001.640625
795 205787.34375
796 205394.4375
797 206464.1875
798 206903.8125
799 208015.0
800 208191.25
801 208101.828125
802 209954.8125
803 210269.46875
804 210767.5625
805 211372.703125
806 211747.09375
807 212372.625
808 212785.796875
809 213327.53125
810 212709.3125
811 215196.9375
812 215710.15625
813 217342.421875
814 218456.75
815 219561.421875
816 220729.6875
817 221328.359375
818 223664.15625
819 223940.171875
820 225550.859375
821 228434.015625
822 229288.265625
823 232183.515625
824 235758.59375
825 237954.6875
826 240874.140625
827 245033.5625
828 249081.40625
829 254036.03125
830 258848.015625
831 265546.65625
832 272009.3125
833 278870.53125
834 289564.875
835 300865.9375
836 314214.375
837 332096.25
838 350135.78125
839 376475.3125
840 410175.4375
841 453370.5
842 513122.375
843 593528.75
844 716769.75
845 911638.0
846 1272179.5
847 2067585.25
848 4923744.0
at tensor([[[[0.8970]]]], device='cuda:0')
2it [05:07, 154.42s/it]at tensor([[[[0.0007]]]], device='cuda:0')
0 197601.21875
1 197269.46875
2 195888.828125
3 196846.9375
4 196490.90625
5 196097.46875
6 196254.609375
7 196587.625
8 196736.640625
9 196569.828125
10 196065.40625
11 196877.328125
12 197208.65625
13 196375.359375
14 196716.34375
15 196760.484375
16 196464.625
17 196314.5625
18 196127.78125
19 196624.6875
20 196178.9375
21 196447.4375
22 196080.53125
23 197881.734375
24 197147.28125
25 196620.78125
26 195407.3125
27 196190.9375
28 196859.1875
29 197397.34375
30 196564.796875
31 196691.5
32 196250.453125
33 195689.65625
34 197365.375
35 195756.625
36 197056.53125
37 196832.03125
38 196714.84375
39 196118.296875
40 195816.15625
41 196627.140625
42 197145.890625
43 196501.34375
44 197219.96875
45 196560.3125
46 196809.203125
47 197117.46875
48 196919.28125
49 197002.75
50 196880.4375
51 197167.453125
52 196821.375
53 196977.25
54 196718.875
55 195437.65625
56 195914.53125
57 195570.734375
58 196300.359375
59 196841.703125
60 196244.53125
61 196808.625
62 196076.109375
63 197236.71875
64 196881.8125
65 197095.875
66 196082.46875
67 196935.265625
68 196585.90625
69 196513.5625
70 196998.5625
71 195526.578125
72 196471.65625
73 196001.078125
74 196743.65625
75 196977.40625
76 196562.78125
77 196628.59375
78 196557.375
79 196727.0625
80 196064.03125
81 195907.734375
82 196608.03125
83 196881.1875
84 195477.09375
85 196276.640625
86 197503.875
87 196240.078125
88 196171.15625
89 197419.21875
90 198144.0
91 196693.03125
92 195702.625
93 195752.8125
94 195146.046875
95 196952.125
96 196165.8125
97 196911.4375
98 197824.28125
99 196471.546875
100 195830.25
101 196673.65625
102 197285.96875
103 196710.3125
104 196417.140625
105 196379.75
106 196101.015625
107 196513.578125
108 196048.71875
109 195374.203125
110 195542.21875
111 196940.15625
112 197086.8125
113 196905.09375
114 197224.90625
115 196397.234375
116 196167.15625
117 197163.6875
118 196034.15625
119 197523.75
120 196345.0
121 196469.515625
122 196194.625
123 197143.59375
124 196886.03125
125 196478.609375
126 195665.65625
127 196691.765625
128 196988.109375
129 196238.390625
130 196747.4375
131 196573.625
132 197557.5
133 196583.125
134 197482.0625
135 197567.5625
136 195887.59375
137 196126.328125
138 196871.96875
139 196904.6875
140 197025.46875
141 195896.9375
142 196674.46875
143 197016.90625
144 197549.65625
145 196755.078125
146 196418.25
147 197179.328125
148 196729.875
149 196399.125
150 197583.65625
151 196967.78125
152 196629.0
153 196951.140625
154 197308.15625
155 196541.6875
156 197354.28125
157 197990.53125
158 196333.703125
159 197089.84375
160 194960.875
161 196788.78125
162 196262.109375
163 197345.375
164 197117.265625
165 196984.625
166 196101.484375
167 197054.296875
168 197164.671875
169 196284.15625
170 197120.21875
171 197739.390625
172 196091.375
173 196398.5
174 196807.375
175 196308.359375
176 197007.84375
177 196361.21875
178 197182.34375
179 196794.890625
180 196051.515625
181 196786.15625
182 197112.84375
183 196931.671875
184 196718.53125
185 197645.984375
186 196015.75
187 196731.15625
188 195395.875
189 196121.1875
190 195300.96875
191 196802.90625
192 197123.75
193 196364.453125
194 197399.0625
195 196410.40625
196 197229.15625
197 196380.3125
198 196236.046875
199 197265.671875
200 196808.03125
201 196592.1875
202 195786.75
203 196398.3125
204 196593.28125
205 198020.3125
206 197122.640625
207 197193.546875
208 195982.5625
209 197023.09375
210 196571.109375
211 197350.875
212 195581.234375
213 196680.71875
214 197179.9375
215 196574.375
216 196075.640625
217 196786.96875
218 197024.53125
219 196589.15625
220 195695.671875
221 197452.125
222 196827.328125
223 196384.0625
224 195893.84375
225 196613.203125
226 196637.3125
227 196329.40625
228 196536.390625
229 196052.046875
230 197057.75
231 197344.296875
232 196621.71875
233 197357.484375
234 196764.078125
235 196200.640625
236 197650.625
237 197685.359375
238 197119.78125
239 196887.484375
240 196832.796875
241 197285.46875
242 196661.625
243 196887.4375
244 196441.765625
245 195810.828125
246 196219.375
247 196677.125
248 197037.125
249 196490.3125
250 196044.4375
251 196022.390625
252 196813.046875
253 196907.984375
254 196902.15625
255 196661.3125
256 196275.6875
257 196663.0
258 195407.40625
259 196720.609375
260 197029.234375
261 197299.28125
262 196782.65625
263 196874.71875
264 197378.0
265 197350.859375
266 197086.90625
267 196485.40625
268 197191.6875
269 196562.296875
270 195664.8125
271 196633.84375
272 196914.78125
273 196614.671875
274 196317.78125
275 196535.234375
276 196872.765625
277 196136.40625
278 196181.875
279 197110.5625
280 197044.4375
281 196352.78125
282 196516.28125
283 197194.359375
284 196902.53125
285 197306.9375
286 197262.796875
287 196632.90625
288 195796.765625
289 196579.4375
290 197580.703125
291 197239.5
292 196863.140625
293 196228.828125
294 196302.0
295 197359.90625
296 197229.03125
297 196663.078125
298 198310.875
299 196702.40625
300 196094.125
301 197483.375
302 197366.578125
303 196776.359375
304 195536.9375
305 196336.421875
306 196778.65625
307 196550.34375
308 197555.265625
309 197520.890625
310 196618.625
311 197343.03125
312 195841.21875
313 196534.46875
314 197048.5625
315 197277.4375
316 196726.546875
317 196135.859375
318 196856.125
319 196233.390625
320 196196.125
321 196691.5625
322 195805.1875
323 196968.40625
324 197214.90625
325 196706.46875
326 197199.078125
327 196356.0
328 195615.90625
329 196567.0625
330 196561.15625
331 197604.25
332 197149.75
333 196119.46875
334 196769.625
335 196033.53125
336 196792.296875
337 197024.265625
338 196142.78125
339 196838.578125
340 196061.890625
341 196840.46875
342 196013.3125
343 197347.796875
344 196291.25
345 196520.46875
346 197033.34375
347 196387.1875
348 197881.609375
349 197507.171875
350 196226.984375
351 196279.40625
352 195931.453125
353 197084.25
354 197150.90625
355 197059.515625
356 196279.234375
357 197175.96875
358 197542.59375
359 196169.765625
360 196006.03125
361 197466.3125
362 196639.859375
363 197172.484375
364 196951.1875
365 196662.125
366 197150.765625
367 196791.96875
368 196385.71875
369 196340.625
370 197399.078125
371 196803.71875
372 196182.671875
373 195639.984375
374 196907.234375
375 197720.0625
376 197159.53125
377 196030.375
378 195887.28125
379 197053.359375
380 196677.53125
381 196178.96875
382 197055.5625
383 197173.5625
384 197835.046875
385 197196.125
386 196505.4375
387 198141.765625
388 196289.40625
389 197513.40625
390 195972.15625
391 197854.28125
392 197477.953125
393 196966.921875
394 195950.34375
395 195949.6875
396 196863.375
397 195836.390625
398 196920.5
399 197240.125
400 196583.21875
401 197243.453125
402 197125.71875
403 197250.125
404 196382.5625
405 196840.875
406 196248.0
407 197184.28125
408 196537.53125
409 197493.328125
410 196062.65625
411 196410.03125
412 196023.484375
413 196051.09375
414 197054.875
415 196064.390625
416 197118.78125
417 197447.328125
418 197680.65625
419 197011.8125
420 196444.5
421 198902.484375
422 196302.09375
423 197934.90625
424 196411.921875
425 197230.15625
426 197286.90625
427 197027.03125
428 195939.65625
429 197689.53125
430 196297.03125
431 194939.859375
432 197102.6875
433 196273.375
434 196480.046875
435 196514.46875
436 196400.15625
437 196033.1875
438 196635.65625
439 195915.375
440 198213.796875
441 197231.890625
442 196711.0
443 197198.0625
444 196496.28125
445 197235.84375
446 197280.875
447 197320.875
448 196850.9375
449 197576.5
450 197057.25
451 196558.765625
452 195814.71875
453 196721.546875
454 195841.4375
455 195913.625
456 196379.0
457 196163.4375
458 196065.734375
459 196268.46875
460 195752.46875
461 196082.09375
462 196942.609375
463 195851.59375
464 195799.34375
465 196553.515625
466 196404.296875
467 196712.546875
468 196127.15625
469 196374.703125
470 195101.28125
471 197041.46875
472 196888.15625
473 196825.53125
474 196618.875
475 196334.921875
476 195156.875
477 196936.171875
478 195619.453125
479 197420.78125
480 196914.28125
481 196564.8125
482 197082.015625
483 196647.65625
484 196326.046875
485 196594.140625
486 195767.84375
487 195918.6875
488 197712.375
489 196575.3125
490 196800.890625
491 195786.625
492 196730.34375
493 195192.4375
494 197091.765625
495 196866.6875
496 196682.0625
497 197227.5
498 197219.09375
499 196121.609375
500 197594.234375
501 197342.65625
502 196861.46875
503 196817.53125
504 195967.0
505 196354.234375
506 197431.96875
507 197212.296875
508 196724.234375
509 197106.984375
510 197306.625
511 196103.09375
512 197377.984375
513 196353.21875
514 196443.0625
515 197413.6875
516 196919.046875
517 196046.5
518 197538.796875
519 198329.40625
520 197176.90625
521 195921.609375
522 196498.0625
523 197112.546875
524 196147.765625
525 197080.109375
526 196894.296875
527 196904.625
528 196952.25
529 196927.28125
530 197555.6875
531 195440.03125
532 196200.46875
533 197202.28125
534 196365.234375
535 197260.25
536 196810.109375
537 196463.03125
538 196700.078125
539 195881.390625
540 196984.0
541 196299.15625
542 197303.515625
543 196167.40625
544 197295.15625
545 196919.09375
546 196597.015625
547 196226.0625
548 197126.84375
549 197350.40625
550 196464.09375
551 197714.9375
552 197555.296875
553 196537.109375
554 197714.703125
555 195534.59375
556 198153.9375
557 197125.484375
558 197036.96875
559 196077.25
560 197761.8125
561 196784.1875
562 196826.40625
563 196881.625
564 197292.625
565 196168.484375
566 196091.4375
567 196719.234375
568 196535.140625
569 196716.9375
570 197235.703125
571 197034.578125
572 195515.78125
573 196621.328125
574 195726.9375
575 196036.0
576 196569.8125
577 196990.21875
578 196943.125
579 196707.015625
580 196247.890625
581 196451.28125
582 196820.0625
583 196881.953125
584 196599.375
585 196645.40625
586 196209.21875
587 196478.078125
588 197075.421875
589 196747.21875
590 197371.875
591 197484.65625
592 196968.828125
593 198320.3125
594 196505.5625
595 197048.234375
596 196117.625
597 197276.6875
598 196369.6875
599 196863.0
600 196914.375
601 196584.046875
602 197256.046875
603 194564.8125
604 196472.109375
605 196579.0625
606 196024.359375
607 197172.890625
608 196514.390625
609 197142.703125
610 197402.484375
611 196930.328125
612 196651.5
613 197444.609375
614 196459.5
615 197615.0
616 196810.015625
617 195406.734375
618 196620.625
619 197798.1875
620 196349.8125
621 197588.15625
622 197370.921875
623 197573.40625
624 196908.65625
625 197270.53125
626 195854.203125
627 196341.578125
628 196298.90625
629 197518.03125
630 197059.453125
631 197077.96875
632 196914.4375
633 197518.078125
634 197207.34375
635 195729.9375
636 197223.78125
637 196538.96875
638 197097.21875
639 196288.15625
640 196999.71875
641 196610.28125
642 197191.875
643 196009.15625
644 196675.9375
645 195651.609375
646 196702.0625
647 197394.53125
648 196841.28125
649 197507.65625
650 194961.90625
651 197311.1875
652 195866.40625
653 198192.734375
654 197195.0625
655 197883.53125
656 197043.921875
657 196818.625
658 197859.15625
659 195929.4375
660 197561.4375
661 196492.421875
662 197559.703125
663 197248.890625
664 195904.796875
665 195727.71875
666 196847.4375
667 197291.609375
668 195902.96875
669 197039.859375
670 196268.8125
671 196620.15625
672 197035.375
673 197010.828125
674 195827.265625
675 196253.953125
676 197301.25
677 197735.65625
678 197686.6875
679 196821.671875
680 196427.546875
681 197241.78125
682 195982.25
683 197934.15625
684 196604.359375
685 196668.359375
686 196959.25
687 197864.453125
688 197343.609375
689 196710.875
690 198160.75
691 196596.0
692 197087.71875
693 197131.375
694 196783.875
695 196615.3125
696 197691.625
697 196677.25
698 197503.34375
699 197938.046875
700 197137.328125
701 196977.328125
702 197202.328125
703 197659.390625
704 197923.78125
705 198172.453125
706 196566.203125
707 196317.21875
708 195971.21875
709 197800.296875
710 196866.4375
711 196882.203125
712 197238.625
713 196837.9375
714 197695.34375
715 197118.359375
716 197342.21875
717 196038.90625
718 197434.96875
719 196349.90625
720 198312.71875
721 197800.28125
722 196775.34375
723 197447.578125
724 196135.5
725 197723.703125
726 197317.484375
727 197488.875
728 196892.71875
729 197647.828125
730 197213.203125
731 198050.609375
732 197101.625
733 197695.15625
734 197502.0625
735 196982.671875
736 197379.59375
737 196535.8125
738 197689.234375
739 198240.234375
740 196879.09375
741 197574.3125
742 197985.3125
743 196324.703125
744 197530.6875
745 198533.21875
746 197343.6875
747 197333.578125
748 197978.671875
749 198166.625
750 197714.203125
751 197139.359375
752 197687.90625
753 197642.375
754 197512.640625
755 197893.25
756 197728.34375
757 197655.09375
758 198048.78125
759 197101.15625
760 197329.46875
761 197195.0625
762 198575.125
763 197605.125
764 197287.90625
765 197845.703125
766 198087.640625
767 197983.953125
768 199205.65625
769 198027.6875
770 198267.46875
771 198399.40625
772 198276.6875
773 198469.34375
774 198645.4375
775 198291.71875
776 199351.328125
777 198666.390625
778 198538.8125
779 197669.3125
780 198568.75
781 198804.1875
782 198520.359375
783 198539.578125
784 198463.921875
785 198524.9375
786 198553.75
787 198072.84375
788 199675.53125
789 198981.265625
790 199718.71875
791 198619.9375
792 199040.21875
793 198805.828125
794 199561.453125
795 199041.421875
796 198978.375
797 200281.59375
798 199550.9375
799 201420.40625
800 200118.53125
801 198947.65625
802 200614.296875
803 200996.265625
804 201546.140625
805 200050.3125
806 200271.921875
807 202261.828125
808 201574.15625
809 201521.140625
810 202046.359375
811 201514.875
812 203735.484375
813 203527.796875
814 201992.390625
815 204768.09375
816 203079.3125
817 204445.484375
818 203472.828125
819 205403.8125
820 205757.734375
821 206553.75
822 206023.359375
823 207994.140625
824 207127.546875
825 207605.796875
826 208651.765625
827 209200.625
828 210471.03125
829 214002.21875
830 212711.421875
831 215238.21875
832 216858.703125
833 219995.75
834 222749.5625
835 225274.5625
836 229186.3125
837 233585.59375
838 238735.0
839 246789.453125
840 254571.375
841 266897.59375
842 280863.28125
843 303946.96875
844 337803.90625
845 390817.9375
846 490114.4375
847 727562.25
848 1607432.5
at tensor([[[[0.8970]]]], device='cuda:0')
3it [08:01, 163.06s/it]at tensor([[[[0.0007]]]], device='cuda:0')
0 195617.3125
1 198283.9375
2 197183.703125
3 196899.609375
4 196079.84375
5 197201.4375
6 196196.328125
7 196606.5
8 196477.25
9 196502.59375
10 196642.1875
11 196900.40625
12 197108.171875
13 196555.171875
14 196322.75
15 195988.5
16 197484.125
17 195939.296875
18 196403.75
19 197197.890625
20 196764.15625
21 196611.59375
22 196945.5625
23 197507.46875
24 197008.65625
25 196611.34375
26 197662.0625
27 197061.75
28 196765.3125
29 196871.203125
30 197082.421875
31 196855.71875
32 195953.1875
33 196369.09375
34 196350.5
35 195819.78125
36 196544.5
37 196159.34375
38 197172.3125
39 197024.25
40 196393.953125
41 196231.703125
42 197115.625
43 197148.875
44 196992.75
45 198068.4375
46 196338.15625
47 196360.375
48 195649.03125
49 197027.96875
50 196034.96875
51 195852.9375
52 195558.203125
53 196083.890625
54 196447.421875
55 195759.1875
56 196351.75
57 196818.40625
58 196264.921875
59 196954.140625
60 196109.203125
61 198131.03125
62 196243.46875
63 196963.1875
64 195585.921875
65 198203.625
66 196876.546875
67 195884.875
68 197151.5
69 197079.0
70 197686.75
71 197961.71875
72 197083.34375
73 196759.4375
74 196290.9375
75 196803.21875
76 196649.28125
77 197354.421875
78 197252.140625
79 197521.75
80 196735.40625
81 196506.3125
82 195664.65625
83 196172.390625
84 195109.140625
85 195816.484375
86 195571.84375
87 196789.4375
88 196861.421875
89 196902.34375
90 196617.625
91 196254.109375
92 196929.40625
93 197221.5
94 196783.0625
95 197676.84375
96 196932.09375
97 195639.375
98 196888.1875
99 196616.4375
100 195896.71875
101 196368.34375
102 197023.65625
103 196862.09375
104 196561.3125
105 196110.8125
106 197926.046875
107 195805.203125
108 196027.21875
109 196581.234375
110 197766.34375
111 196920.265625
112 196859.78125
113 198104.0625
114 195917.40625
115 196971.46875
116 197486.53125
117 196983.75
118 195366.90625
119 196032.65625
120 197401.0
121 196771.109375
122 196839.5
123 196928.578125
124 197641.1875
125 196089.171875
126 196071.03125
127 196223.125
128 196927.921875
129 196112.703125
130 196588.46875
131 196946.671875
132 195514.53125
133 196918.0
134 198098.03125
135 196824.578125
136 196384.03125
137 197190.671875
138 196129.875
139 197324.28125
140 195583.734375
141 196172.15625
142 196297.109375
143 197241.09375
144 197938.6875
145 196254.9375
146 196864.984375
147 196545.0625
148 196934.3125
149 196212.46875
150 196255.796875
151 196988.640625
152 197044.671875
153 196444.21875
154 196587.140625
155 197997.53125
156 195849.953125
157 196255.484375
158 196196.15625
159 196212.234375
160 196672.234375
161 197327.96875
162 196228.578125
163 196539.5625
164 195405.515625
165 196748.625
166 196708.15625
167 197044.59375
168 196255.6875
169 195971.703125
170 196966.65625
171 196160.015625
172 195947.09375
173 196951.625
174 196023.8125
175 197178.953125
176 196399.71875
177 197268.0
178 197066.453125
179 196021.125
180 196840.109375
181 196269.671875
182 196214.8125
183 196357.1875
184 196741.0625
185 196906.71875
186 198044.890625
187 196922.34375
188 196788.296875
189 195467.65625
190 196486.6875
191 196537.578125
192 195907.671875
193 196434.625
194 196653.125
195 196473.984375
196 197386.109375
197 196557.34375
198 196767.203125
199 197493.375
200 197458.171875
201 196517.40625
202 195939.875
203 197406.78125
204 196786.03125
205 197228.234375
206 197510.5
207 197081.21875
208 196083.40625
209 196822.796875
210 197773.25
211 196676.53125
212 197241.96875
213 197040.65625
214 197958.578125
215 196585.125
216 197110.875
217 197217.578125
218 196401.828125
219 195844.375
220 196956.65625
221 197095.75
222 197026.8125
223 196271.765625
224 196056.609375
225 196417.375
226 195347.59375
227 197802.59375
228 196600.84375
229 197049.484375
230 196952.21875
231 196661.84375
232 196311.890625
233 196496.046875
234 196367.53125
235 196510.5
236 195652.875
237 196949.609375
238 196815.0
239 196827.6875
240 195983.796875
241 197810.625
242 196551.5625
243 196524.90625
244 198308.78125
245 196525.734375
246 196188.390625
247 197196.53125
248 196456.421875
249 197610.625
250 196243.234375
251 195918.265625
252 196296.75
253 197341.84375
254 196085.34375
255 196695.328125
256 196824.96875
257 196424.78125
258 197851.8125
259 196026.625
260 197131.546875
261 197060.296875
262 197414.359375
263 196820.71875
264 196405.03125
265 196199.09375
266 197003.9375
267 196923.5625
268 197253.265625
269 196901.40625
270 197068.671875
271 197177.1875
272 197432.59375
273 196501.34375
274 197044.59375
275 196776.0625
276 196765.65625
277 196486.34375
278 196213.796875
279 196300.625
280 196116.515625
281 196775.140625
282 196025.09375
283 196292.84375
284 197358.078125
285 196669.96875
286 196200.90625
287 197119.15625
288 196916.0
289 196434.171875
290 196736.125
291 197053.4375
292 195871.265625
293 196413.9375
294 196401.21875
295 197109.53125
296 197438.421875
297 196579.15625
298 196572.4375
299 196503.34375
300 197350.53125
301 196499.328125
302 196337.3125
303 196508.40625
304 196240.125
305 196636.0
306 196950.59375
307 196293.6875
308 196222.328125
309 195765.65625
310 195894.9375
311 196632.09375
312 197847.828125
313 197287.8125
314 196333.015625
315 196637.34375
316 196599.53125
317 196657.703125
318 195791.65625
319 197070.84375
320 195800.9375
321 196402.3125
322 197511.6875
323 196856.0
324 197469.546875
325 197124.4375
326 195567.4375
327 197372.34375
328 196630.578125
329 197020.78125
330 196987.703125
331 196271.203125
332 196376.015625
333 196541.1875
334 195702.046875
335 197195.5
336 196155.25
337 196977.0625
338 197696.40625
339 196786.359375
340 197211.15625
341 197256.65625
342 196986.890625
343 196756.671875
344 196868.640625
345 196773.0625
346 196688.125
347 195939.21875
348 197456.125
349 197292.875
350 196791.0
351 196145.46875
352 196909.453125
353 197426.96875
354 197961.390625
355 196843.578125
356 196974.140625
357 196073.484375
358 197162.3125
359 196352.875
360 197445.265625
361 196467.25
362 197186.15625
363 197213.84375
364 196739.84375
365 196723.0625
366 196964.125
367 197185.625
368 195750.578125
369 197058.6875
370 196969.4375
371 196965.796875
372 197479.25
373 196311.1875
374 196685.859375
375 197004.9375
376 196469.21875
377 196753.6875
378 196416.25
379 194766.765625
380 197212.4375
381 197057.046875
382 197509.53125
383 197162.984375
384 196583.921875
385 198118.09375
386 196235.15625
387 196564.28125
388 196829.8125
389 197622.90625
390 196227.046875
391 196949.015625
392 196941.0625
393 196338.46875
394 196201.875
395 196723.46875
396 196621.5
397 196755.640625
398 196988.25
399 197079.9375
400 196255.3125
401 196210.84375
402 195279.15625
403 197887.5625
404 197406.625
405 196839.5
406 196815.171875
407 197685.125
408 197048.09375
409 196569.84375
410 195773.8125
411 196985.78125
412 197222.03125
413 198098.96875
414 196290.28125
415 196272.625
416 196722.203125
417 196494.984375
418 195873.0625
419 197481.90625
420 196254.34375
421 196500.765625
422 197732.921875
423 196908.859375
424 196951.796875
425 195933.25
426 195838.375
427 195971.03125
428 197115.03125
429 197586.28125
430 197427.828125
431 196688.859375
432 196997.328125
433 197123.078125
434 197276.15625
435 195806.125
436 197249.578125
437 196911.3125
438 196349.90625
439 197651.375
440 196989.828125
441 196892.140625
442 196799.46875
443 196320.3125
444 197319.734375
445 197016.40625
446 197595.671875
447 197282.984375
448 197162.5
449 197945.03125
450 197240.34375
451 196585.8125
452 196162.9375
453 196330.03125
454 196877.328125
455 196966.21875
456 196809.90625
457 196818.65625
458 197330.703125
459 197742.75
460 196272.0
461 196791.65625
462 196508.296875
463 197387.015625
464 196670.421875
465 196597.828125
466 197726.59375
467 196273.234375
468 197823.765625
469 197263.28125
470 196603.359375
471 196366.390625
472 196533.046875
473 196380.90625
474 197012.59375
475 197495.109375
476 197269.78125
477 197430.96875
478 197068.265625
479 196153.875
480 197381.640625
481 196955.625
482 195872.046875
483 196360.296875
484 197032.375
485 197150.21875
486 196482.953125
487 197088.921875
488 196910.65625
489 196977.34375
490 197100.046875
491 197104.96875
492 197131.3125
493 196133.3125
494 197075.1875
495 196661.09375
496 196361.0
497 196884.5625
498 197870.90625
499 196267.015625
500 196475.34375
501 196284.765625
502 196006.890625
503 196221.0
504 197440.40625
505 197242.421875
506 197362.40625
507 197214.1875
508 197534.125
509 195378.75
510 197683.46875
511 198169.265625
512 197291.0625
513 197208.6875
514 196433.53125
515 197086.15625
516 197448.671875
517 196098.90625
518 196974.5625
519 196334.875
520 196010.4375
521 195597.5
522 196554.59375
523 197291.0
524 197407.234375
525 198325.53125
526 195782.46875
527 196678.90625
528 196877.15625
529 196457.78125
530 197224.4375
531 198651.53125
532 197781.46875
533 197139.59375
534 198474.859375
535 197869.171875
536 197277.59375
537 197156.8125
538 197789.78125
539 197561.609375
540 197501.34375
541 196589.75
542 198133.921875
543 197256.5625
544 197178.453125
545 196987.5
546 196544.875
547 197547.5625
548 198259.71875
549 197462.125
550 195903.734375
551 196467.625
552 196583.171875
553 195864.1875
554 198028.265625
555 196902.890625
556 197625.78125
557 197738.0625
558 196338.1875
559 198290.953125
560 196953.4375
561 196243.65625
562 196971.765625
563 197676.984375
564 196344.15625
565 197505.125
566 196209.1875
567 196778.25
568 197489.53125
569 197310.40625
570 197277.8125
571 198071.59375
572 197091.265625
573 196974.734375
574 198160.40625
575 197495.40625
576 196213.46875
577 196789.4375
578 197218.828125
579 196612.5625
580 197438.65625
581 196909.15625
582 197714.5
583 197469.25
584 198644.5625
585 197990.5
586 196865.984375
587 197740.6875
588 196995.125
589 197410.578125
590 197425.78125
591 196959.4375
592 197869.5625
593 198067.6875
594 198747.90625
595 196752.65625
596 198199.421875
597 197904.46875
598 197894.046875
599 198361.9375
600 197470.34375
601 196597.046875
602 197721.28125
603 196678.1875
604 197839.015625
605 196532.25
606 197536.34375
607 196774.5
608 197707.71875
609 197945.09375
610 196888.0625
611 197116.40625
612 197421.0625
613 196046.3125
614 197183.90625
615 196796.125
616 197670.546875
617 198149.953125
618 198101.84375
619 196149.609375
620 196787.359375
621 197093.3125
622 197164.21875
623 198178.09375
624 197174.4375
625 198370.9375
626 196937.1875
627 197060.5625
628 198714.90625
629 197803.59375
630 196931.90625
631 197702.03125
632 198029.515625
633 197048.5
634 197663.0
635 198718.953125
636 197583.296875
637 196996.3125
638 198491.671875
639 197915.75
640 198195.09375
641 197245.84375
642 197992.3125
643 197667.375
644 197796.953125
645 198378.140625
646 198174.8125
647 198545.828125
648 197253.875
649 197038.875
650 196728.6875
651 197537.9375
652 196963.96875
653 197063.671875
654 198287.71875
655 198017.1875
656 197288.90625
657 197486.046875
658 198583.28125
659 198528.0
660 198576.484375
661 199025.125
662 197425.03125
663 198363.359375
664 198421.46875
665 197426.171875
666 197873.109375
667 198137.8125
668 197134.125
669 198167.109375
670 198335.0
671 196725.3125
672 196980.421875
673 197508.46875
674 198899.875
675 197953.53125
676 197887.71875
677 197817.53125
678 198421.84375
679 197351.21875
680 198325.0
681 197991.09375
682 197917.640625
683 197932.09375
684 198028.515625
685 199913.09375
686 199910.375
687 197863.15625
688 198147.46875
689 198321.28125
690 198846.5
691 199209.03125
692 197570.90625
693 198219.5
694 198059.875
695 198819.875
696 198797.90625
697 198031.375
698 198743.28125
699 198477.484375
700 198071.765625
701 198207.65625
702 198402.515625
703 197161.125
704 199061.125
705 198298.0625
706 198204.0
707 198145.3125
708 198655.171875
709 198808.28125
710 199678.75
711 198710.25
712 198342.703125
713 199321.828125
714 198588.59375
715 198701.625
716 198823.46875
717 198949.859375
718 198597.5625
719 199426.75
720 198593.9375
721 199357.40625
722 199733.1875
723 199405.296875
724 198477.375
725 200006.171875
726 199398.5625
727 198844.171875
728 199776.609375
729 198938.78125
730 199647.765625
731 198418.25
732 198924.75
733 199001.75
734 199972.515625
735 199179.703125
736 199698.015625
737 199417.375
738 200099.09375
739 199306.4375
740 199155.28125
741 199757.546875
742 200234.5625
743 199579.421875
744 199653.03125
745 199223.375
746 200925.78125
747 200479.5
748 200744.15625
749 199661.921875
750 200444.65625
751 200151.25
752 199902.140625
753 199611.03125
754 200077.09375
755 200948.46875
756 200882.21875
757 201090.5625
758 199955.1875
759 201751.234375
760 201286.875
761 200104.21875
762 202204.90625
763 200744.203125
764 202401.859375
765 200477.9375
766 201688.96875
767 202015.96875
768 201536.9375
769 201020.0625
770 202167.296875
771 203050.734375
772 202085.46875
773 203241.03125
774 201507.890625
775 202140.4375
776 201355.234375
777 201722.0625
778 201902.3125
779 202390.859375
780 202476.640625
781 202492.96875
782 204678.0625
783 203467.4375
784 204367.703125
785 204461.65625
786 203530.375
787 203577.828125
788 204186.96875
789 204376.0
790 203743.265625
791 205009.1875
792 205071.0625
793 204415.6875
794 205745.53125
795 205716.65625
796 205487.125
797 205691.84375
798 207307.484375
799 206952.390625
800 206888.25
801 207357.9375
802 208154.390625
803 209589.515625
804 209626.1875
805 211602.0
806 209516.125
807 211148.765625
808 211405.84375
809 211695.796875
810 211302.109375
811 212835.921875
812 214094.25
813 214380.890625
814 215191.640625
815 215109.5
816 217093.296875
817 218079.140625
818 218453.421875
819 219579.671875
820 220323.0625
821 224328.125
822 224819.65625
823 225761.484375
824 228659.625
825 227679.53125
826 231814.09375
827 234115.40625
828 237150.5
829 242056.0
830 244206.328125
831 247209.59375
832 252916.734375
833 256682.53125
834 264823.34375
835 270972.84375
836 276785.78125
837 290351.71875
838 299786.0
839 316110.5
840 334866.125
841 358827.9375
842 392383.9375
843 437417.1875
844 500602.5
845 604940.9375
846 793079.9375
847 1208892.125
848 2710290.0
at tensor([[[[0.8970]]]], device='cuda:0')
4it [10:56, 167.98s/it]at tensor([[[[0.0007]]]], device='cuda:0')
0 197489.53125
1 195567.71875
2 195632.25
3 196726.9375
4 196242.875
5 196721.125
6 196882.046875
7 197561.03125
8 195699.703125
9 196868.96875
10 196431.78125
11 197166.34375
12 196939.578125
13 196540.5
14 195595.125
15 195868.265625
16 197059.6875
17 196344.28125
18 196372.9375
19 197404.625
20 197023.0
21 196835.875
22 196297.0
23 195809.453125
24 195683.859375
25 195073.15625
26 195998.875
27 196909.609375
28 196630.046875
29 196071.03125
30 197997.34375
31 196492.640625
32 196866.421875
33 195764.046875
34 197382.5
35 197058.203125
36 196786.71875
37 196473.6875
38 196831.28125
39 196983.34375
40 197689.734375
41 196653.6875
42 195622.6875
43 196245.0625
44 196739.75
45 196057.578125
46 196532.6875
47 196356.21875
48 196755.03125
49 195986.625
50 196069.078125
51 195530.28125
52 196770.40625
53 196707.46875
54 196514.90625
55 196623.53125
56 197648.4375
57 196339.25
58 196507.8125
59 197024.171875
60 196595.046875
61 196070.796875
62 196302.0625
63 196208.359375
64 197747.59375
65 196291.03125
66 196498.53125
67 196972.125
68 196825.9375
69 195917.21875
70 196667.71875
71 196811.96875
72 196811.875
73 197034.703125
74 197138.15625
75 195877.8125
76 196423.484375
77 195910.828125
78 196154.03125
79 195853.4375
80 197504.0625
81 196124.921875
82 197492.625
83 196666.5625
84 196204.28125
85 196828.375
86 196633.328125
87 196767.71875
88 197282.640625
89 195840.328125
90 197995.75
91 196138.734375
92 197366.75
93 195783.40625
94 195665.75
95 197359.59375
96 197092.859375
97 196694.859375
98 196266.71875
99 196604.90625
100 195741.40625
101 196635.9375
102 196971.03125
103 196201.34375
104 196966.984375
105 197194.984375
106 196083.328125
107 196217.4375
108 198117.9375
109 196056.9375
110 196182.28125
111 194732.796875
112 197398.0625
113 195898.1875
114 195965.5
115 196099.09375
116 195234.703125
117 197198.515625
118 196689.515625
119 195291.65625
120 195648.234375
121 195451.015625
122 197321.40625
123 197016.265625
124 195755.4375
125 197168.96875
126 196608.046875
127 195174.71875
128 196890.703125
129 197217.5625
130 197217.921875
131 196579.171875
132 196704.78125
133 196732.328125
134 197201.921875
135 197910.09375
136 197230.6875
137 196444.734375
138 196793.5625
139 197051.75
140 195118.875
141 196571.625
142 196329.34375
143 195368.640625
144 196776.59375
145 196502.0625
146 196329.578125
147 195944.484375
148 197018.578125
149 196686.15625
150 197409.4375
151 197297.546875
152 196376.4375
153 196444.90625
154 196683.9375
155 196150.4375
156 196512.65625
157 196230.765625
158 197653.25
159 195906.1875
160 197099.0
161 196310.609375
162 197168.140625
163 195794.28125
164 196642.375
165 197102.03125
166 197054.75
167 196650.703125
168 195977.640625
169 196281.90625
170 197042.953125
171 197045.5
172 197261.265625
173 195626.65625
174 196652.671875
175 197423.0
176 197325.34375
177 195860.78125
178 196114.734375
179 197310.40625
180 197944.4375
181 195602.9375
182 197151.140625
183 196783.390625
184 198908.34375
185 196364.5
186 196087.0625
187 195899.65625
188 197433.25
189 197130.484375
190 196492.46875
191 195433.21875
192 196770.171875
193 196065.6875
194 197692.34375
195 196771.8125
196 196889.109375
197 196322.109375
198 195980.6875
199 196826.609375
200 197347.9375
201 196925.0
202 195582.875
203 196881.65625
204 196157.96875
205 195958.75
206 196671.125
207 196429.734375
208 196823.5625
209 195389.546875
210 196895.03125
211 197153.15625
212 196519.71875
213 197515.65625
214 196633.84375
215 196804.78125
216 196427.625
217 197199.1875
218 196494.75
219 195563.390625
220 196622.125
221 197039.0625
222 197738.15625
223 196770.203125
224 196662.625
225 197686.78125
226 198302.625
227 195998.0625
228 197233.96875
229 196116.1875
230 197264.875
231 197103.5
232 197337.328125
233 196473.28125
234 196796.4375
235 196931.359375
236 196243.09375
237 196349.5625
238 196624.015625
239 196920.8125
240 196407.96875
241 196509.78125
242 197484.015625
243 196887.3125
244 196133.5
245 196960.71875
246 196985.0
247 196937.421875
248 196286.875
249 196856.671875
250 196057.375
251 197443.09375
252 196816.28125
253 196603.140625
254 196500.140625
255 197495.6875
256 195632.140625
257 196311.96875
258 196574.78125
259 196325.046875
260 196152.75
261 196990.0
262 196971.484375
263 196552.0625
264 195541.1875
265 196297.828125
266 197856.8125
267 197423.03125
268 197043.0
269 196706.34375
270 196731.234375
271 196894.28125
272 195895.5
273 198104.3125
274 197055.84375
275 196597.5625
276 195936.734375
277 197069.53125
278 196450.046875
279 196943.125
280 196764.78125
281 197529.75
282 196858.5
283 196586.09375
284 197315.546875
285 195864.53125
286 195532.90625
287 196443.5625
288 195515.421875
289 196712.71875
290 197417.0625
291 197062.765625
292 196610.75
293 196383.734375
294 196825.3125
295 196527.875
296 196730.875
297 196532.4375
298 197487.53125
299 196704.65625
300 196435.890625
301 197413.171875
302 196876.96875
303 196717.78125
304 196435.0625
305 196277.921875
306 197219.75
307 197014.28125
308 196281.09375
309 196825.0625
310 195837.71875
311 195789.125
312 196341.703125
313 197754.25
314 196434.5625
315 196714.78125
316 196741.34375
317 196596.953125
318 196449.4375
319 196449.625
320 195945.375
321 196585.9375
322 196543.90625
323 196089.828125
324 197943.4375
325 196074.109375
326 197278.8125
327 196042.25
328 196545.9375
329 197114.984375
330 196470.25
331 197126.859375
332 196291.140625
333 197721.734375
334 195839.65625
335 196306.53125
336 196191.0625
337 195997.890625
338 197277.5
339 196343.28125
340 196185.984375
341 196607.703125
342 197901.40625
343 196960.375
344 195866.09375
345 196961.3125
346 197105.625
347 195047.828125
348 197682.0
349 197225.09375
350 196664.34375
351 196468.03125
352 196343.484375
353 196727.625
354 197926.34375
355 196504.28125
356 195439.0625
357 196335.40625
358 196953.859375
359 196540.640625
360 196656.609375
361 196733.640625
362 196235.6875
363 197066.84375
364 198262.375
365 196060.484375
366 197076.171875
367 195498.515625
368 196360.515625
369 196890.96875
370 196375.515625
371 196506.1875
372 196737.171875
373 196959.71875
374 197995.640625
375 196830.828125
376 196499.9375
377 197009.90625
378 196674.171875
379 196845.375
380 196883.4375
381 196226.9375
382 195750.65625
383 197454.359375
384 197313.21875
385 195967.0
386 196985.6875
387 197624.015625
388 196222.3125
389 196373.75
390 197346.8125
391 196933.5625
392 197831.171875
393 198067.96875
394 196805.96875
395 196722.078125
396 196008.015625
397 195944.9375
398 196729.765625
399 196697.03125
400 197454.65625
401 197156.75
402 196883.09375
403 197524.3125
404 196304.03125
405 197100.375
406 197679.453125
407 195924.375
408 197205.21875
409 197225.203125
410 195764.8125
411 196491.46875
412 197075.3125
413 197340.125
414 195884.375
415 196609.921875
416 196593.203125
417 197404.421875
418 196832.1875
419 197086.09375
420 197218.125
421 197793.78125
422 196707.0625
423 196832.5625
424 197357.3125
425 196631.625
426 196518.15625
427 196895.234375
428 195932.6875
429 197109.96875
430 196124.265625
431 196831.90625
432 196657.84375
433 197202.078125
434 197280.0
435 196406.859375
436 196963.78125
437 197023.375
438 196732.671875
439 196250.484375
440 196774.75
441 197507.453125
442 196182.90625
443 196788.125
444 196688.4375
445 197143.5625
446 196877.515625
447 196907.234375
448 197041.8125
449 196610.5
450 196924.046875
451 196102.4375
452 196663.21875
453 197103.71875
454 195602.25
455 196803.6875
456 196086.375
457 197432.28125
458 197522.6875
459 195381.71875
460 196679.3125
461 197616.75
462 196903.78125
463 196229.96875
464 195810.125
465 197530.0
466 196620.03125
467 197168.0
468 196596.03125
469 196590.046875
470 197344.234375
471 197046.0
472 196216.6875
473 196203.203125
474 196023.515625
475 196661.375
476 197169.09375
477 195958.578125
478 196035.984375
479 196204.640625
480 195836.5625
481 196367.0
482 196747.546875
483 197641.4375
484 198210.484375
485 198082.265625
486 197611.90625
487 198091.28125
488 196336.625
489 197335.0
490 196816.765625
491 197410.375
492 195751.265625
493 196977.5
494 197381.296875
495 197316.4375
496 196838.140625
497 196486.59375
498 195531.9375
499 196745.78125
500 197574.71875
501 197039.109375
502 196246.796875
503 196725.609375
504 196066.296875
505 197137.34375
506 195595.65625
507 196490.65625
508 196811.203125
509 196732.8125
510 196000.859375
511 197523.640625
512 197101.640625
513 197457.96875
514 197705.515625
515 197315.53125
516 197448.5625
517 196879.5
518 196618.15625
519 197584.71875
520 197453.375
521 196422.984375
522 197104.359375
523 196264.171875
524 195943.875
525 196742.9375
526 197354.703125
527 196108.28125
528 196630.078125
529 196816.171875
530 197350.0
531 197663.671875
532 196775.8125
533 196187.296875
534 197046.0
535 195960.6875
536 197546.171875
537 196938.34375
538 196166.6875
539 196946.5625
540 197517.53125
541 196070.5625
542 195877.3125
543 198379.8125
544 196583.234375
545 196201.75
546 197460.671875
547 197426.59375
548 195519.65625
549 196163.875
550 196761.59375
551 196742.96875
552 196792.875
553 196471.09375
554 196657.625
555 196116.15625
556 196537.765625
557 196145.5625
558 197110.71875
559 195937.15625
560 197389.46875
561 197473.5625
562 196463.21875
563 197674.90625
564 196707.03125
565 197569.96875
566 198083.125
567 198168.765625
568 196322.65625
569 197325.28125
570 197128.34375
571 196614.6875
572 196288.84375
573 196850.9375
574 197429.359375
575 196284.828125
576 197481.671875
577 196616.15625
578 196450.84375
579 197204.28125
580 196750.34375
581 197546.4375
582 197409.6875
583 197057.40625
584 197880.0625
585 196781.015625
586 197759.453125
587 196265.4375
588 195902.40625
589 197560.0
590 197274.78125
591 197671.90625
592 197568.90625
593 196736.78125
594 196286.578125
595 196851.21875
596 196943.765625
597 196371.78125
598 196643.3125
599 196815.09375
600 197179.453125
601 197688.609375
602 197287.5
603 197488.71875
604 198663.65625
605 196629.15625
606 196862.84375
607 198168.4375
608 195696.21875
609 197042.796875
610 196674.25
611 197636.4375
612 196825.0625
613 197892.671875
614 198170.28125
615 196665.15625
616 197868.640625
617 196937.8125
618 197430.78125
619 197394.96875
620 196424.015625
621 197769.875
622 196704.59375
623 196391.625
624 196582.234375
625 196993.234375
626 196425.28125
627 197365.015625
628 198535.640625
629 197076.125
630 197972.125
631 198128.84375
632 195867.171875
633 197019.125
634 197445.328125
635 197352.859375
636 198071.9375
637 197299.40625
638 196661.5625
639 196850.09375
640 197694.4375
641 198129.4375
642 197482.265625
643 196789.0625
644 196179.09375
645 195881.28125
646 197614.640625
647 197843.1875
648 197377.40625
649 197814.71875
650 197187.46875
651 197046.0625
652 197335.125
653 198086.53125
654 196579.59375
655 197537.875
656 198533.3125
657 197375.25
658 197541.703125
659 196809.4375
660 197072.875
661 196463.78125
662 198053.34375
663 198416.4375
664 197272.375
665 196073.640625
666 196008.625
667 198078.90625
668 197711.15625
669 197254.8125
670 196487.5625
671 198418.0
672 196953.21875
673 197862.859375
674 199258.453125
675 197129.71875
676 196933.421875
677 198066.546875
678 197100.109375
679 197255.4375
680 197634.28125
681 197608.8125
682 197180.546875
683 198413.78125
684 196965.890625
685 197933.875
686 197473.234375
687 198547.40625
688 197814.609375
689 198003.90625
690 195874.0
691 197816.0625
692 198344.59375
693 198342.765625
694 196539.125
695 198194.125
696 196644.71875
697 197175.1875
698 197377.359375
699 197652.875
700 198846.75
701 197164.375
702 197229.78125
703 199039.140625
704 197115.125
705 198935.28125
706 199029.34375
707 196727.5
708 197433.46875
709 199174.125
710 197484.4375
711 198348.4375
712 199193.734375
713 199290.578125
714 198108.09375
715 197817.78125
716 197933.734375
717 198278.4375
718 198682.34375
719 197360.25
720 198316.203125
721 199558.6875
722 196991.5
723 198394.390625
724 197926.75
725 198000.484375
726 198652.640625
727 198270.28125
728 198540.125
729 198139.390625
730 198743.84375
731 198728.40625
732 199399.4375
733 199248.09375
734 199676.125
735 199358.203125
736 199346.46875
737 198556.234375
738 199149.28125
739 198966.4375
740 198376.75
741 198913.296875
742 199779.65625
743 199685.9375
744 199771.65625
745 200000.875
746 198848.34375
747 198925.59375
748 199477.21875
749 200100.9375
750 199596.546875
751 199662.03125
752 199361.5
753 199111.71875
754 199422.703125
755 198359.40625
756 201488.71875
757 200390.046875
758 200267.828125
759 200371.09375
760 200789.15625
761 200142.578125
762 200727.65625
763 202070.40625
764 200008.21875
765 201255.421875
766 199337.75
767 200494.296875
768 200889.5625
769 201321.8125
770 200645.5625
771 201887.59375
772 200426.96875
773 200268.859375
774 201255.09375
775 201571.53125
776 201850.34375
777 201560.0
778 201716.96875
779 202246.0625
780 203160.53125
781 203024.625
782 201862.671875
783 202381.8125
784 202330.390625
785 203320.703125
786 203339.15625
787 204270.34375
788 203717.015625
789 203955.109375
790 203895.03125
791 204335.390625
792 205082.9375
793 204075.578125
794 205852.375
795 205415.90625
796 205706.953125
797 207623.1875
798 206227.15625
799 206540.015625
800 207458.859375
801 207684.765625
802 209253.421875
803 207946.796875
804 208170.625
805 208983.78125
806 210237.828125
807 211409.96875
808 211641.21875
809 211823.625
810 212574.75
811 213837.78125
812 214813.875
813 214702.734375
814 215746.28125
815 217790.25
816 218193.65625
817 219511.21875
818 220375.078125
819 221857.875
820 222937.484375
821 225092.28125
822 226933.25
823 228412.9375
824 230537.1875
825 232306.6875
826 234556.09375
827 238467.90625
828 240294.0625
829 246036.4375
830 249365.4375
831 256079.21875
832 258525.125
833 265267.0
834 271878.1875
835 280528.59375
836 290994.78125
837 301054.40625
838 316419.875
839 333574.71875
840 355958.5
841 383925.125
842 422960.5
843 474166.8125
844 553203.0
845 675276.0
846 896566.5
847 1385621.0
848 3151326.0
at tensor([[[[0.8970]]]], device='cuda:0')
5it [13:52, 170.68s/it]at tensor([[[[0.0007]]]], device='cuda:0')
0 195670.734375
1 197173.234375
2 197111.03125
3 197431.140625
4 195931.578125
5 196546.8125
6 196365.25
7 196495.375
8 197268.5
9 196361.3125
10 196796.0
11 197659.8125
12 196267.640625
13 197391.375
14 197061.078125
15 196932.875
16 196151.21875
17 196506.25
18 196820.875
19 196342.953125
20 196025.59375
21 197070.453125
22 197177.15625
23 197054.515625
24 195835.6875
25 196142.15625
26 197047.609375
27 196970.75
28 195691.0625
29 196776.59375
30 196752.625
31 196960.3125
32 196681.96875
33 196343.125
34 196464.46875
35 196219.609375
36 196074.53125
37 196849.453125
38 196470.4375
39 196916.8125
40 196987.390625
41 194979.546875
42 196448.59375
43 196981.296875
44 196577.5625
45 195837.875
46 197734.265625
47 195876.75
48 195930.890625
49 196957.40625
50 196565.6875
51 197217.375
52 197761.203125
53 197274.484375
54 198202.640625
55 197010.3125
56 196895.4375
57 197255.515625
58 197640.125
59 197183.296875
60 197294.8125
61 196659.53125
62 196698.40625
63 196842.078125
64 196014.25
65 197074.15625
66 196018.953125
67 196921.515625
68 196564.03125
69 196811.8125
70 196109.625
71 196774.3125
72 195895.3125
73 195833.6875
74 196324.21875
75 196150.8125
76 197060.453125
77 196693.25
78 196730.0625
79 196063.84375
80 196290.21875
81 197672.53125
82 196581.78125
83 196353.640625
84 196764.5625
85 197261.484375
86 195856.234375
87 196071.90625
88 196647.15625
89 196283.109375
90 197249.875
91 197375.046875
92 196576.5
93 196477.984375
94 196105.46875
95 196557.65625
96 197035.265625
97 197519.46875
98 197165.75
99 196310.25
100 197183.484375
101 196836.15625
102 196990.34375
103 196055.25
104 196311.71875
105 196680.65625
106 196462.90625
107 197083.96875
108 196018.15625
109 196618.46875
110 196669.75
111 196379.21875
112 197358.03125
113 195713.0
114 196615.734375
115 198127.0
116 196355.1875
117 195776.90625
118 197267.65625
119 195891.03125
120 196907.453125
121 195692.5625
122 196861.015625
123 196474.390625
124 196380.015625
125 197701.828125
126 197620.375
127 197224.0
128 197916.9375
129 197623.984375
130 196560.71875
131 197077.703125
132 195759.84375
133 195781.046875
134 196915.8125
135 196747.25
136 197210.90625
137 195529.796875
138 196693.0625
139 196433.03125
140 195628.1875
141 196494.8125
142 195910.40625
143 196226.828125
144 195782.765625
145 196507.21875
146 197022.515625
147 197151.140625
148 197812.75
149 196490.09375
150 196522.71875
151 196515.40625
152 196328.21875
153 197621.75
154 196694.71875
155 196772.28125
156 196673.78125
157 196357.65625
158 197042.125
159 197380.46875
160 196867.5
161 196258.9375
162 196784.0
163 196716.1875
164 196750.125
165 197169.3125
166 197013.0625
167 196189.78125
168 196645.65625
169 196996.875
170 196987.765625
171 196805.25
172 196873.5
173 197299.078125
174 195096.078125
175 196757.78125
176 196427.8125
177 195684.328125
178 196911.859375
179 197478.140625
180 197207.703125
181 196875.6875
182 196837.671875
183 196621.8125
184 197480.625
185 197585.421875
186 196059.421875
187 197660.703125
188 197102.09375
189 196673.859375
190 195899.03125
191 197373.03125
192 195871.765625
193 196528.5625
194 197875.171875
195 195304.875
196 196525.65625
197 195302.703125
198 196554.40625
199 197273.09375
200 196171.8125
201 197772.84375
202 196209.0625
203 196569.71875
204 197273.578125
205 197193.625
206 197137.296875
207 196714.671875
208 196365.03125
209 196170.90625
210 196137.953125
211 195441.921875
212 196559.78125
213 195072.875
214 195305.953125
215 195625.8125
216 195972.640625
217 197045.078125
218 196653.40625
219 196899.171875
220 196867.46875
221 197763.296875
222 196872.71875
223 195107.53125
224 195575.640625
225 197272.75
226 197051.53125
227 196810.4375
228 197228.59375
229 196563.296875
230 195734.375
231 196881.03125
232 196598.25
233 196055.296875
234 196450.453125
235 196931.6875
236 194602.8125
237 196794.03125
238 196545.375
239 197114.921875
240 196514.171875
241 196922.875
242 196518.5625
243 196440.0625
244 196215.40625
245 196574.5
246 196629.03125
247 194682.4375
248 197126.53125
249 197264.40625
250 196877.34375
251 196324.234375
252 196881.296875
253 196509.8125
254 197002.015625
255 195693.140625
256 196644.125
257 196700.234375
258 196474.984375
259 197646.1875
260 198638.78125
261 196820.0625
262 196950.5
263 197183.34375
264 197314.6875
265 196061.71875
266 196723.21875
267 195767.46875
268 195443.9375
269 196932.609375
270 197003.3125
271 196880.046875
272 197110.65625
273 197259.296875
274 197259.296875
275 197031.6875
276 196997.625
277 196718.4375
278 196941.328125
279 196486.71875
280 196378.6875
281 196239.28125
282 197566.953125
283 197363.421875
284 196669.234375
285 196682.359375
286 195803.03125
287 196990.234375
288 195791.75
289 196828.84375
290 195550.9375
291 196449.296875
292 197117.09375
293 196800.453125
294 198222.0625
295 196611.40625
296 196128.09375
297 197538.59375
298 196674.4375
299 196853.9375
300 196039.953125
301 196518.59375
302 195520.078125
303 196668.625
304 196221.15625
305 196735.328125
306 197525.65625
307 196184.3125
308 196780.65625
309 197608.34375
310 195157.078125
311 196211.34375
312 196883.9375
313 196766.8125
314 197521.109375
315 196664.1875
316 196861.9375
317 197687.265625
318 197244.640625
319 196922.296875
320 195855.3125
321 196764.71875
322 198307.625
323 196656.265625
324 197114.71875
325 196924.5625
326 196847.328125
327 196627.65625
328 196454.484375
329 195329.78125
330 195890.375
331 196977.046875
332 196298.6875
333 197798.875
334 197241.546875
335 196437.78125
336 197411.8125
337 196096.34375
338 196590.03125
339 195707.15625
340 195968.546875
341 196359.90625
342 196527.34375
343 197443.265625
344 197112.46875
345 197683.46875
346 197335.8125
347 197626.34375
348 196250.875
349 195647.25
350 195785.375
351 197308.3125
352 196692.140625
353 196690.40625
354 196741.09375
355 195539.875
356 196677.5625
357 196342.15625
358 196866.09375
359 197465.359375
360 196282.125
361 196335.03125
362 198125.015625
363 196431.6875
364 196131.375
365 196644.8125
366 197171.5
367 197126.1875
368 197359.6875
369 196433.34375
370 196760.71875
371 197186.40625
372 197188.203125
373 195795.609375
374 196072.390625
375 196887.96875
376 197399.15625
377 198348.984375
378 195990.40625
379 197073.171875
380 196913.34375
381 196354.03125
382 197776.4375
383 197310.5625
384 196304.0625
385 197480.984375
386 196408.03125
387 196733.375
388 196146.46875
389 196973.109375
390 196840.296875
391 196812.75
392 196468.421875
393 197068.59375
394 196374.96875
395 197522.25
396 196886.75
397 196232.84375
398 196945.484375
399 196820.0625
400 196959.828125
401 196090.15625
402 197472.34375
403 196876.1875
404 195127.75
405 197138.96875
406 197575.9375
407 196500.28125
408 197461.921875
409 197270.609375
410 196727.03125
411 196700.3125
412 196283.71875
413 196633.375
414 196156.734375
415 195587.484375
416 197016.34375
417 196323.53125
418 196588.5
419 197390.21875
420 196946.15625
421 196841.546875
422 196901.0625
423 197139.328125
424 196956.375
425 197322.71875
426 196572.34375
427 197758.8125
428 197255.5625
429 196947.9375
430 197532.5625
431 196806.046875
432 195379.875
433 196606.6875
434 196798.90625
435 196123.15625
436 195978.59375
437 196577.25
438 196470.125
439 196449.84375
440 195611.171875
441 196793.75
442 197235.5
443 195704.109375
444 196133.03125
445 196871.625
446 196454.84375
447 195907.0
448 195486.03125
449 197616.890625
450 196700.453125
451 196550.40625
452 196282.125
453 197176.140625
454 197282.53125
455 195818.765625
456 197366.015625
457 196418.90625
458 196180.46875
459 196588.5625
460 196818.78125
461 196484.828125
462 195780.0
463 196487.0
464 196512.21875
465 196426.375
466 196821.4375
467 196515.875
468 197105.921875
469 196212.96875
470 196740.953125
471 196303.4375
472 196432.90625
473 196634.0
474 196555.015625
475 197148.890625
476 196771.296875
477 196637.53125
478 196881.125
479 197136.328125
480 196091.34375
481 199134.9375
482 197316.921875
483 196518.71875
484 196886.875
485 197004.25
486 196410.34375
487 198070.5625
488 196786.859375
489 196060.53125
490 195942.25
491 196177.359375
492 197494.53125
493 197199.21875
494 196821.59375
495 196763.890625
496 196697.59375
497 195996.78125
498 197774.203125
499 197401.984375
500 197919.171875
501 196457.3125
502 196989.140625
503 197114.390625
504 196087.671875
505 197291.171875
506 195796.578125
507 196704.65625
508 196161.90625
509 196633.078125
510 197661.328125
511 196948.734375
512 198200.34375
513 196849.4375
514 196956.0625
515 195681.34375
516 195629.9375
517 196755.6875
518 196314.0
519 195895.578125
520 196417.625
521 197433.28125
522 196733.71875
523 196889.5625
524 197926.9375
525 198023.21875
526 196245.53125
527 197890.0
528 197115.3125
529 196497.765625
530 196622.296875
531 196724.65625
532 196735.828125
533 196177.96875
534 196157.125
535 196888.1875
536 197029.109375
537 195778.859375
538 196741.59375
539 196632.5
540 196933.5
541 196623.953125
542 196672.71875
543 197637.90625
544 196653.078125
545 197051.71875
546 197404.65625
547 196894.96875
548 197588.859375
549 196953.09375
550 197103.90625
551 196257.90625
552 196097.46875
553 197338.234375
554 196225.671875
555 196404.8125
556 197865.09375
557 196726.8125
558 197514.9375
559 195972.9375
560 196414.5
561 197075.34375
562 196322.046875
563 196601.953125
564 198335.125
565 196321.140625
566 196830.265625
567 196930.8125
568 197269.125
569 196138.1875
570 196287.828125
571 197566.75
572 198339.1875
573 197354.640625
574 197938.1875
575 196992.3125
576 196787.53125
577 196921.34375
578 196612.84375
579 196687.71875
580 196799.90625
581 197555.359375
582 197322.1875
583 197511.921875
584 196328.375
585 196317.703125
586 198259.640625
587 196930.9375
588 196354.140625
589 196611.9375
590 195864.0
591 196617.09375
592 196862.046875
593 196569.5625
594 197750.1875
595 196813.171875
596 197076.390625
597 196664.03125
598 196437.5625
599 197399.203125
600 197134.375
601 196945.34375
602 196847.625
603 197632.3125
604 196275.984375
605 197210.59375
606 196830.25
607 197572.828125
608 197421.234375
609 197192.78125
610 196234.890625
611 196825.515625
612 197679.734375
613 197947.734375
614 197167.90625
615 197001.71875
616 196617.734375
617 197260.4375
618 197803.84375
619 196489.734375
620 196871.53125
621 197058.15625
622 197031.9375
623 196925.8125
624 197392.125
625 196860.921875
626 197213.03125
627 198052.53125
628 197229.53125
629 197307.96875
630 196584.328125
631 197986.21875
632 196737.1875
633 197180.0625
634 196714.234375
635 196224.53125
636 197273.625
637 197961.765625
638 196239.8125
639 197477.953125
640 198111.40625
641 197392.59375
642 197649.25
643 198337.65625
644 197239.78125
645 196357.953125
646 196976.578125
647 196746.8125
648 197771.125
649 196782.6875
650 197450.5625
651 197936.078125
652 197413.9375
653 196451.640625
654 197221.015625
655 198587.171875
656 197054.3125
657 197273.109375
658 197964.90625
659 196855.015625
660 197280.875
661 197185.28125
662 197193.21875
663 197502.15625
664 197515.234375
665 197869.3125
666 197739.640625
667 197136.65625
668 197375.421875
669 197558.0
670 197137.84375
671 198023.3125
672 199240.1875
673 198170.109375
674 196955.078125
675 197227.84375
676 197425.875
677 196718.390625
678 198299.90625
679 197929.234375
680 197360.796875
681 198477.59375
682 197673.125
683 198208.015625
684 197871.859375
685 198314.671875
686 197757.609375
687 197879.09375
688 198401.609375
689 197524.9375
690 197613.1875
691 197205.0625
692 197104.921875
693 198620.921875
694 197176.078125
695 197733.390625
696 198600.453125
697 197263.90625
698 197320.828125
699 197503.46875
700 198298.28125
701 198395.921875
702 197669.796875
703 198023.5
704 198439.65625
705 197032.578125
706 197968.90625
707 197296.90625
708 197341.96875
709 197944.8125
710 198464.3125
711 198693.0625
712 198300.1875
713 197986.921875
714 197556.53125
715 198820.375
716 197390.59375
717 197448.53125
718 198457.265625
719 197800.9375
720 199385.4375
721 198201.5
722 198595.6875
723 197879.1875
724 197589.5625
725 199239.0625
726 198183.53125
727 199093.765625
728 198253.25
729 198479.90625
730 198000.421875
731 197212.296875
732 198953.90625
733 198135.1875
734 199055.25
735 199046.9375
736 198586.09375
737 199095.515625
738 198771.8125
739 198274.21875
740 198881.75
741 199292.421875
742 199778.78125
743 199449.28125
744 198898.359375
745 198918.625
746 199433.828125
747 199423.171875
748 199697.5
749 200283.328125
750 200254.203125
751 198934.296875
752 200675.9375
753 199442.421875
754 199727.828125
755 198375.046875
756 198988.875
757 199168.265625
758 199027.75
759 200200.09375
760 200445.015625
761 199046.171875
762 199920.625
763 200580.484375
764 200826.0625
765 200350.4375
766 200131.453125
767 202487.328125
768 200532.65625
769 200518.859375
770 201529.34375
771 199737.0
772 200565.75
773 201440.75
774 202371.234375
775 200872.75
776 200977.59375
777 201561.75
778 201674.46875
779 200817.3125
780 201529.21875
781 202242.1875
782 202260.453125
783 202983.296875
784 201501.703125
785 202613.25
786 203683.71875
787 203258.03125
788 203735.375
789 203242.5625
790 203778.671875
791 204047.515625
792 203801.640625
793 204574.40625
794 205528.421875
795 204717.390625
796 205593.6875
797 204581.84375
798 206071.015625
799 206336.609375
800 206118.15625
801 208144.3125
802 206947.0625
803 207473.09375
804 208796.5
805 208860.125
806 210784.96875
807 210463.40625
808 210381.359375
809 211091.59375
810 212228.546875
811 211340.0
812 213937.65625
813 214295.921875
814 215018.5625
815 215425.75
816 216449.234375
817 217913.65625
818 219406.28125
819 219534.953125
820 220879.984375
821 223261.09375
822 224157.609375
823 227843.921875
824 228636.296875
825 229261.4375
826 234402.59375
827 235114.59375
828 239260.609375
829 244059.875
830 244974.5625
831 249227.203125
832 254052.578125
833 259425.75
834 266998.9375
835 273531.5
836 284343.21875
837 295411.71875
838 306777.28125
839 323662.28125
840 345388.25
841 372462.875
842 406216.84375
843 453566.5625
844 523919.03125
845 634768.875
846 834791.75
847 1278133.375
848 2882090.0
at tensor([[[[0.8970]]]], device='cuda:0')
6it [16:48, 172.51s/it]at tensor([[[[0.0007]]]], device='cuda:0')
0 196145.8125
1 196085.96875
2 196083.734375
3 196342.1875
4 196135.453125
5 195702.3125
6 197359.875
7 196138.875
8 196663.703125
9 196406.09375
10 195485.09375
11 196190.09375
12 197706.21875
13 195631.875
14 195497.625
15 196503.78125
16 196674.046875
17 197889.78125
18 196168.53125
19 197425.765625
20 196231.0
21 196338.40625
22 196327.265625
23 196413.046875
24 196503.375
25 196848.578125
26 197278.84375
27 198037.234375
28 196178.265625
29 196868.375
30 196716.765625
31 196246.890625
32 196527.921875
33 196440.25
34 197040.953125
35 196881.5625
36 196550.46875
37 196118.25
38 196028.390625
39 197306.875
40 196567.75
41 196553.84375
42 197094.53125
43 196624.359375
44 197768.3125
45 196500.546875
46 196610.84375
47 196638.015625
48 196223.078125
49 197258.328125
50 197175.921875
51 196647.8125
52 197096.234375
53 196118.09375
54 196326.125
55 196088.875
56 195999.6875
57 196817.515625
58 196476.734375
59 196572.46875
60 195461.671875
61 196516.65625
62 196104.0625
63 196783.21875
64 195796.9375
65 196467.4375
66 197738.1875
67 196874.21875
68 195617.890625
69 196083.46875
70 197615.984375
71 195478.296875
72 196067.4375
73 196109.953125
74 196049.09375
75 196438.203125
76 195805.6875
77 196523.40625
78 195981.015625
79 196113.3125
80 197449.375
81 196384.703125
82 197158.609375
83 195279.78125
84 196694.3125
85 197998.671875
86 196075.59375
87 196979.296875
88 196623.46875
89 196847.609375
90 196853.875
91 196404.296875
92 196461.90625
93 197073.015625
94 196605.09375
95 195930.140625
96 197569.375
97 197148.6875
98 195802.609375
99 196427.53125
100 197197.421875
101 195825.28125
102 194979.15625
103 195302.375
104 196709.71875
105 196746.03125
106 196897.40625
107 196129.75
108 197127.40625
109 195877.703125
110 195215.546875
111 196551.53125
112 197351.125
113 196483.84375
114 197249.59375
115 197025.4375
116 196477.8125
117 197263.46875
118 196367.5
119 196391.5625
120 196499.59375
121 196599.5625
122 197060.453125
123 196922.96875
124 196970.390625
125 196191.96875
126 195716.015625
127 196551.59375
128 197127.15625
129 197327.8125
130 196919.1875
131 197240.765625
132 197654.375
133 197240.671875
134 196331.484375
135 195543.21875
136 196997.40625
137 196332.109375
138 195684.25
139 196725.421875
140 197039.4375
141 197275.859375
142 197781.1875
143 195898.96875
144 196790.234375
145 197455.4375
146 197523.109375
147 196730.5625
148 196146.28125
149 196127.4375
150 196464.3125
151 196667.125
152 197153.609375
153 197715.5625
154 196690.484375
155 195588.625
156 196164.28125
157 196424.4375
158 196657.140625
159 196780.671875
160 195996.21875
161 195944.953125
162 196861.390625
163 197029.5
164 196998.1875
165 196268.5
166 197205.5
167 196843.890625
168 195857.25
169 196928.375
170 197003.78125
171 195142.375
172 196908.796875
173 197299.609375
174 196782.03125
175 197381.96875
176 197033.25
177 198199.03125
178 196167.625
179 196653.25
180 196410.46875
181 197805.78125
182 196677.75
183 197243.03125
184 196247.375
185 197847.578125
186 196520.359375
187 196704.5
188 196598.78125
189 196409.640625
190 196200.03125
191 195860.25
192 197454.625
193 196366.609375
194 197481.15625
195 195876.078125
196 196531.375
197 197062.59375
198 196903.03125
199 197814.828125
200 196769.4375
201 197087.65625
202 196397.15625
203 195965.75
204 196449.890625
205 195299.65625
206 197605.40625
207 196338.71875
208 195973.0
209 196384.65625
210 196532.734375
211 197292.4375
212 197082.03125
213 197416.453125
214 195530.171875
215 196407.53125
216 197817.875
217 197354.09375
218 195686.90625
219 196854.03125
220 196612.453125
221 198008.25
222 196936.265625
223 196609.9375
224 195660.390625
225 197064.28125
226 197132.734375
227 197555.890625
228 195776.15625
229 196388.5
230 197925.6875
231 196739.65625
232 196439.34375
233 197270.90625
234 196714.125
235 196962.09375
236 196921.625
237 196154.4375
238 196285.53125
239 197621.5
240 196987.625
241 197963.625
242 197006.25
243 196440.90625
244 197066.4375
245 196424.40625
246 196502.6875
247 197077.96875
248 196287.453125
249 195393.65625
250 196702.8125
251 196517.21875
252 196547.296875
253 196040.625
254 195530.40625
255 195465.59375
256 197565.9375
257 196910.859375
258 197011.0625
259 197394.421875
260 196860.390625
261 196789.734375
262 197669.359375
263 197035.4375
264 196343.765625
265 197889.53125
266 195771.65625
267 196426.34375
268 196699.03125
269 196228.75
270 198050.234375
271 196567.796875
272 196753.09375
273 196035.4375
274 197142.0
275 197655.03125
276 197164.8125
277 197048.5
278 197364.25
279 196875.3125
280 196077.359375
281 197804.828125
282 195484.640625
283 196050.5625
284 197479.75
285 196301.375
286 197177.453125
287 196798.84375
288 197129.9375
289 195727.09375
290 197299.53125
291 197413.21875
292 197251.671875
293 197075.78125
294 196978.640625
295 197184.734375
296 197248.515625
297 197152.921875
298 195551.03125
299 196473.09375
300 197829.65625
301 196173.5
302 195998.953125
303 197732.15625
304 197039.03125
305 196526.1875
306 197197.15625
307 196626.953125
308 197479.15625
309 197036.71875
310 197314.046875
311 196612.84375
312 196607.359375
313 197081.34375
314 196317.0625
315 196630.8125
316 197337.140625
317 198260.078125
318 196146.28125
319 196498.859375
320 197073.265625
321 196167.609375
322 197717.8125
323 196882.78125
324 197400.96875
325 196780.34375
326 195783.125
327 196554.875
328 196633.6875
329 196018.4375
330 196412.53125
331 197223.484375
332 196251.75
333 197019.5625
334 196169.140625
335 197071.578125
336 196264.421875
337 196087.0625
338 196605.84375
339 195568.09375
340 196097.984375
341 197321.59375
342 197496.984375
343 196539.921875
344 196516.9375
345 196322.671875
346 198110.609375
347 197152.21875
348 197607.109375
349 197168.9375
350 196664.34375
351 196300.84375
352 197666.0625
353 195892.75
354 196796.5
355 196000.1875
356 196110.015625
357 197600.328125
358 197030.609375
359 195703.296875
360 196888.375
361 196727.5
362 197218.1875
363 196672.265625
364 196398.5625
365 196486.015625
366 196359.96875
367 196482.625
368 197238.65625
369 195514.71875
370 196887.9375
371 196067.234375
372 196607.359375
373 197863.921875
374 197459.15625
375 197388.75
376 197766.3125
377 196144.40625
378 196843.59375
379 196226.484375
380 196748.375
381 196093.578125
382 197268.125
383 196124.15625
384 197411.421875
385 196213.875
386 197217.40625
387 196538.78125
388 196693.875
389 196944.875
390 196858.0625
391 196079.6875
392 196772.40625
393 197151.265625
394 196742.375
395 196847.1875
396 197013.3125
397 197623.25
398 196977.6875
399 196115.703125
400 197086.625
401 197958.5
402 196281.8125
403 196415.671875
404 195745.296875
405 197184.546875
406 196557.078125
407 196259.09375
408 196445.78125
409 197137.078125
410 196561.15625
411 196944.578125
412 196847.296875
413 196962.890625
414 196908.640625
415 196223.6875
416 197257.484375
417 195648.15625
418 196978.875
419 197300.78125
420 196910.28125
421 196008.90625
422 197243.25
423 196236.9375
424 195904.53125
425 197754.59375
426 196595.40625
427 197403.296875
428 195662.203125
429 197655.734375
430 196537.921875
431 196204.1875
432 198349.984375
433 196287.609375
434 196606.53125
435 196964.296875
436 196677.375
437 196553.53125
438 197226.0
439 196395.59375
440 196286.40625
441 197306.3125
442 196871.25
443 197687.234375
444 196351.609375
445 197465.859375
446 197122.609375
447 196220.875
448 196620.53125
449 197133.5
450 196797.0
451 196185.59375
452 196589.640625
453 197153.515625
454 196478.75
455 196552.78125
456 196497.1875
457 197687.8125
458 196201.6875
459 196629.0625
460 196762.75
461 195257.40625
462 196605.578125
463 197004.875
464 196749.640625
465 197330.5625
466 196825.1875
467 195848.46875
468 196035.71875
469 197587.359375
470 198204.625
471 197026.6875
472 196106.6875
473 198093.546875
474 197600.8125
475 196015.9375
476 196023.78125
477 196881.25
478 197188.90625
479 196381.1875
480 196003.0625
481 197175.3125
482 196403.484375
483 196753.625
484 196257.65625
485 197520.4375
486 196031.46875
487 196627.28125
488 196924.078125
489 196195.53125
490 197585.6875
491 197236.8125
492 196535.171875
493 197917.203125
494 196773.15625
ERROR:torch.distributed.elastic.multiprocessing.api:failed (exitcode: -15) local_rank: 0 (pid: 3000) of binary: /home/philip/anaconda3/envs/generative_prompt/bin/python
Traceback (most recent call last):
  File "/home/philip/anaconda3/envs/generative_prompt/lib/python3.9/runpy.py", line 197, in _run_module_as_main
    return _run_code(code, main_globals, None,
  File "/home/philip/anaconda3/envs/generative_prompt/lib/python3.9/runpy.py", line 87, in _run_code
    exec(code, run_globals)
  File "/home/philip/anaconda3/envs/generative_prompt/lib/python3.9/site-packages/torch/distributed/launch.py", line 196, in <module>
    main()
  File "/home/philip/anaconda3/envs/generative_prompt/lib/python3.9/site-packages/torch/distributed/launch.py", line 192, in main
    launch(args)
  File "/home/philip/anaconda3/envs/generative_prompt/lib/python3.9/site-packages/torch/distributed/launch.py", line 177, in launch
    run(args)
  File "/home/philip/anaconda3/envs/generative_prompt/lib/python3.9/site-packages/torch/distributed/run.py", line 785, in run
    elastic_launch(
  File "/home/philip/anaconda3/envs/generative_prompt/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 134, in __call__
    return launch_agent(self._config, self._entrypoint, list(args))
  File "/home/philip/anaconda3/envs/generative_prompt/lib/python3.9/site-packages/torch/distributed/launcher/api.py", line 250, in launch_agent
    raise ChildFailedError(
torch.distributed.elastic.multiprocessing.errors.ChildFailedError: 
======================================================
main.py FAILED
------------------------------------------------------
Failures:
  <NO_OTHER_FAILURES>
------------------------------------------------------
Root Cause (first observed failure):
[0]:
  time      : 2023-05-11_17:55:54
  host      : desktop
  rank      : 0 (local_rank: 0)
  exitcode  : -15 (pid: 3000)
  error_file: <N/A>
  traceback : Signal 15 (SIGTERM) received by PID 3000
======================================================
/home/philip/anaconda3/envs/generative_prompt/lib/python3.9/multiprocessing/resource_tracker.py:216: UserWarning: resource_tracker: There appear to be 6 leaked semaphore objects to clean up at shutdown
  warnings.warn('resource_tracker: There appear to be %d '
